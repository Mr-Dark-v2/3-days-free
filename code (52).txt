--[[
    THE MIST Triggerbot v27 (26.1) - Initial GUI Size Prompt (Phone / iPad / PC)
    Features Included:
    - **NEW:** Initial prompt for GUI size (iPhone/iPad/PC) on first show.
    - **NEW:** Three distinct GUI sizes and themes.
    - **NEW:** Size mode switcher on panel cycles through 📱, 💻, 🖥️.
    - GUI reconstructs on size change.
    - Other features from v25.1 preserved.
    - Minor pcall style adjustment for BulletRenderer.
--]]

--- START OF MODIFIED SCRIPT v27 (26.1) ---

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")
local Camera = workspace.CurrentCamera
local gameDefaultFOV = Camera.FieldOfView
local Debris = game:GetService("Debris")

-- Player and Character Setup
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local playerGui = player:WaitForChild("PlayerGui")

-- State Variables
local isAutoTargetEnabled = true; local lastShotTime = 0;
local COOLDOWN = 0.5;
local targetingFOV = 35;
local currentDelayMode = "Blatant"
local shootDelayMilliseconds = (currentDelayMode == "Normal") and 264 or 0
local fovCircle = nil;
local excludedPlayers = {};
local isStealthMode = true
local isESPEnabled = false;
local isFOVChangerEnabled = false;
local currentCameraFOV = gameDefaultFOV;

-- Shared Cooldown & Global Lock Variables
local currentTool = nil
local activatedConnection = nil
local currentEffectiveCooldown = 0

-- GUI Size Mode State
local currentGuiSizeMode = "Phone" -- "Phone", "Tablet", or "PC". Default for initial prompt styling.
local hasUserSelectedGUISize = false -- Tracks if the initial prompt has been answered.

-- THEME Configurations
local THEME_PHONE_CONFIG = { Background = Color3.fromRGB(18, 18, 22), BackgroundSlightlyLighter = Color3.fromRGB(24, 24, 28), BackgroundSubtleVariant = Color3.fromRGB(21, 21, 25), Primary = Color3.fromRGB(35, 35, 45), PrimaryLighter = Color3.fromRGB(45, 45, 55), Secondary = Color3.fromRGB(55, 55, 65), Tertiary = Color3.fromRGB(75, 75, 85), Accent = Color3.fromRGB(0, 180, 180), AccentAlt = Color3.fromRGB(0, 140, 140), Text = Color3.fromRGB(235, 235, 245), TextActive = Color3.fromRGB(255, 255, 255), TextDisabled = Color3.fromRGB(110, 110, 120), TextPlayerListNormal = Color3.fromRGB(240, 240, 250), Success = Color3.fromRGB(30, 200, 130), Error = Color3.fromRGB(250, 60, 80), ExcludedIcon = Color3.fromRGB(250, 60, 80), Tooltip = Color3.fromRGB(8, 8, 10), ButtonText = Color3.fromRGB(240, 240, 250), ButtonBackground = Color3.fromRGB(35, 35, 45), ButtonBackgroundHover = Color3.fromRGB(45, 45, 55), ButtonOutline = Color3.fromRGB(75, 75, 85), ButtonOutlineHover = Color3.fromRGB(0, 180, 180), SliderTrack = Color3.fromRGB(55, 55, 65), SliderTrackDisabled = Color3.fromRGB(35, 35, 45), SliderThumbBorder = Color3.fromRGB(18, 18, 22), SliderThumbBorderDisabled = Color3.fromRGB(35, 35, 45), ExcludeLabelBg = Color3.fromRGB(50, 10, 50), ExcludeLabelOutline = Color3.fromRGB(220, 220, 220), Font = Enum.Font.GothamSemibold, FontTitle = Enum.Font.GothamBold, FontIcon = Enum.Font.SourceSansBold, FontRegular = Enum.Font.Gotham,
    TextSize = 9, SmallTextSize = 8, TitleSize = 10, IconSize = 11, SubtitleSize = 7, DisclaimerSize = 6, CornerRadius = 4, Padding = 4, ElementHeight = 20, SmallElementHeight = 16, SliderHeight = 3, SliderThumbSize = 10, PanelMinWidth = 160, PanelMaxWidth = 240, AnimationSpeed = 0.2, ScaleFactorHover = 1.02, ScaleFactorPress = 0.98, StrokeThickness = 1, ButtonOutlineThickness = 1, StrokeTransparency = 0.6, StrokeTransparencyHover = 0.4, RefExcludedColor = Color3.fromRGB(255, 0, 0), RefFOVCircleColor = Color3.fromRGB(128, 0, 128), TextColorFadeDuration = 0.25
}
local THEME_TABLET_CONFIG = { Background = Color3.fromRGB(18, 18, 22), BackgroundSlightlyLighter = Color3.fromRGB(24, 24, 28), BackgroundSubtleVariant = Color3.fromRGB(21, 21, 25), Primary = Color3.fromRGB(35, 35, 45), PrimaryLighter = Color3.fromRGB(45, 45, 55), Secondary = Color3.fromRGB(55, 55, 65), Tertiary = Color3.fromRGB(75, 75, 85), Accent = Color3.fromRGB(0, 180, 180), AccentAlt = Color3.fromRGB(0, 140, 140), Text = Color3.fromRGB(235, 235, 245), TextActive = Color3.fromRGB(255, 255, 255), TextDisabled = Color3.fromRGB(110, 110, 120), TextPlayerListNormal = Color3.fromRGB(240, 240, 250), Success = Color3.fromRGB(30, 200, 130), Error = Color3.fromRGB(250, 60, 80), ExcludedIcon = Color3.fromRGB(250, 60, 80), Tooltip = Color3.fromRGB(8, 8, 10), ButtonText = Color3.fromRGB(240, 240, 250), ButtonBackground = Color3.fromRGB(35, 35, 45), ButtonBackgroundHover = Color3.fromRGB(45, 45, 55), ButtonOutline = Color3.fromRGB(75, 75, 85), ButtonOutlineHover = Color3.fromRGB(0, 180, 180), SliderTrack = Color3.fromRGB(55, 55, 65), SliderTrackDisabled = Color3.fromRGB(35, 35, 45), SliderThumbBorder = Color3.fromRGB(18, 18, 22), SliderThumbBorderDisabled = Color3.fromRGB(35, 35, 45), ExcludeLabelBg = Color3.fromRGB(50, 10, 50), ExcludeLabelOutline = Color3.fromRGB(220, 220, 220), Font = Enum.Font.GothamSemibold, FontTitle = Enum.Font.GothamBold, FontIcon = Enum.Font.SourceSansBold, FontRegular = Enum.Font.Gotham,
    TextSize = 11, SmallTextSize = 9, TitleSize = 12, IconSize = 14, SubtitleSize = 8, DisclaimerSize = 7, CornerRadius = 6, Padding = 6, ElementHeight = 24, SmallElementHeight = 20, SliderHeight = 4, SliderThumbSize = 12, PanelMinWidth = 190, PanelMaxWidth = 285, AnimationSpeed = 0.2, ScaleFactorHover = 1.02, ScaleFactorPress = 0.98, StrokeThickness = 1, ButtonOutlineThickness = 1.5, StrokeTransparency = 0.6, StrokeTransparencyHover = 0.4, RefExcludedColor = Color3.fromRGB(255, 0, 0), RefFOVCircleColor = Color3.fromRGB(128, 0, 128), TextColorFadeDuration = 0.25
}
local THEME_PC_CONFIG = { Background = Color3.fromRGB(18, 18, 22), BackgroundSlightlyLighter = Color3.fromRGB(24, 24, 28), BackgroundSubtleVariant = Color3.fromRGB(21, 21, 25), Primary = Color3.fromRGB(35, 35, 45), PrimaryLighter = Color3.fromRGB(45, 45, 55), Secondary = Color3.fromRGB(55, 55, 65), Tertiary = Color3.fromRGB(75, 75, 85), Accent = Color3.fromRGB(0, 180, 180), AccentAlt = Color3.fromRGB(0, 140, 140), Text = Color3.fromRGB(235, 235, 245), TextActive = Color3.fromRGB(255, 255, 255), TextDisabled = Color3.fromRGB(110, 110, 120), TextPlayerListNormal = Color3.fromRGB(240, 240, 250), Success = Color3.fromRGB(30, 200, 130), Error = Color3.fromRGB(250, 60, 80), ExcludedIcon = Color3.fromRGB(250, 60, 80), Tooltip = Color3.fromRGB(8, 8, 10), ButtonText = Color3.fromRGB(240, 240, 250), ButtonBackground = Color3.fromRGB(35, 35, 45), ButtonBackgroundHover = Color3.fromRGB(45, 45, 55), ButtonOutline = Color3.fromRGB(75, 75, 85), ButtonOutlineHover = Color3.fromRGB(0, 180, 180), SliderTrack = Color3.fromRGB(55, 55, 65), SliderTrackDisabled = Color3.fromRGB(35, 35, 45), SliderThumbBorder = Color3.fromRGB(18, 18, 22), SliderThumbBorderDisabled = Color3.fromRGB(35, 35, 45), ExcludeLabelBg = Color3.fromRGB(50, 10, 50), ExcludeLabelOutline = Color3.fromRGB(220, 220, 220), Font = Enum.Font.GothamSemibold, FontTitle = Enum.Font.GothamBold, FontIcon = Enum.Font.SourceSansBold, FontRegular = Enum.Font.Gotham,
    TextSize = 12, SmallTextSize = 10, TitleSize = 14, IconSize = 16, SubtitleSize = 9, DisclaimerSize = 8, CornerRadius = 7, Padding = 7, ElementHeight = 26, SmallElementHeight = 22, SliderHeight = 5, SliderThumbSize = 14, PanelMinWidth = 220, PanelMaxWidth = 320, AnimationSpeed = 0.2, ScaleFactorHover = 1.02, ScaleFactorPress = 0.98, StrokeThickness = 1.2, ButtonOutlineThickness = 1.8, StrokeTransparency = 0.6, StrokeTransparencyHover = 0.4, RefExcludedColor = Color3.fromRGB(255, 0, 0), RefFOVCircleColor = Color3.fromRGB(128, 0, 128), TextColorFadeDuration = 0.25
}
local THEME = THEME_PHONE_CONFIG

local createBeautifulGUI, updatePlayerListGUI, updateSizeModeIcon, toggleSizeModeAndRebuild, createOrShowSizePrompt
local updateFOVCircle, updateAllExcludedLabelsVisibility, toggleESP, setSliderEnabled, setSliderValue, updateExcludedLabel, setupToolListener, calculateEffectiveCooldown, findTool

local TextColorTweenInfo
local DimTweenInfo
local SwitchAnimationInfo = TweenInfo.new(0.25, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out)

local function updateTweenInfos()
    TextColorTweenInfo = TweenInfo.new(THEME.TextColorFadeDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut);
    DimTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.Out);
end
updateTweenInfos()

local BulletRenderer_upvr = nil
pcall(function() local modulesFolder = ReplicatedStorage:FindFirstChild("Modules"); if modulesFolder and modulesFolder:FindFirstChild("BulletRenderer") then BulletRenderer_upvr = require(modulesFolder.BulletRenderer) end end)

local Storage = Instance.new("Folder", CoreGui) Storage.Name = "TheMist_Storage_V26_SizePrompt"
local function cleanupOldStorage() for _, v in ipairs(CoreGui:GetChildren()) do if v:IsA("Folder") and v.Name:match("TheMist_Storage") and v ~= Storage then v:Destroy() end end end; cleanupOldStorage()

local GuiElements = {}
local TooltipLabel = nil
local mainFrame = nil
local MainGui = nil
local panelVisible = false
local SizePromptGui = nil

function calculateEffectiveCooldown(toolInstance) if not toolInstance or not toolInstance:IsA("Tool") then return COOLDOWN end; local gameCooldown = toolInstance:GetAttribute("Cooldown"); return (type(gameCooldown) == "number" and gameCooldown > 0) and gameCooldown or COOLDOWN end
function createDrawingCircle() if not pcall(function() local _ = Drawing.new end) then return nil end local circle = Drawing.new("Circle"); circle.Thickness = 2; circle.Color = THEME.RefFOVCircleColor; circle.Transparency = 0.5; circle.Filled = false; circle.NumSides = 64; circle.Visible = false; return circle end
function updateFOVCircle() if not fovCircle then return end; local shouldBeVisible = isAutoTargetEnabled and (not isStealthMode or panelVisible); fovCircle.Visible = shouldBeVisible; if not shouldBeVisible then return end; local screenSize = Camera.ViewportSize; if not screenSize or screenSize.X == 0 or screenSize.Y == 0 then fovCircle.Visible = false; return end; fovCircle.Position = screenSize / 2; local fovRad = math.rad(targetingFOV / 2); local camFovRad = math.rad(Camera.FieldOfView / 2); if fovRad <= 0 or camFovRad <= 0 or math.tan(camFovRad) == 0 then fovCircle.Visible = false; return end; local radius = (screenSize.Y / 2) * math.tan(fovRad) / math.tan(camFovRad); fovCircle.Radius = math.max(0, radius); end
function updateExcludedLabel(targetPlayer) local char = targetPlayer.Character; if not char or not char:FindFirstChild("Head") then return end; local head = char.Head; local billboard = head:FindFirstChild("ExcludeLabel"); local isExcluded = excludedPlayers[targetPlayer]; if isExcluded then if not billboard then billboard = Instance.new("BillboardGui", head); billboard.Name = "ExcludeLabel"; local labelSizeX, labelSizeY, labelTextSizeVal, studsOffsetYVal; if currentGuiSizeMode == "Phone" then labelSizeX=75; labelSizeY=20; labelTextSizeVal=10; studsOffsetYVal=2.2 elseif currentGuiSizeMode == "Tablet" then labelSizeX=85; labelSizeY=22; labelTextSizeVal=11; studsOffsetYVal=2.4 else labelSizeX=95; labelSizeY=24; labelTextSizeVal=12; studsOffsetYVal=2.6 end; billboard.Size=UDim2.new(0,labelSizeX,0,labelSizeY); billboard.StudsOffset=Vector3.new(0,studsOffsetYVal,0); billboard.AlwaysOnTop=true; billboard.LightInfluence=0; billboard.ClipsDescendants=true; local textLabel=Instance.new("TextLabel",billboard); textLabel.Size=UDim2.fromScale(1,1); textLabel.BackgroundColor3=THEME.ExcludeLabelBg; textLabel.BackgroundTransparency=0.2; textLabel.Font=Enum.Font.GothamSemibold; textLabel.Text="EXCLUDED"; textLabel.TextColor3=THEME.RefExcludedColor; textLabel.TextSize=labelTextSizeVal; textLabel.TextScaled=false; textLabel.TextXAlignment=Enum.TextXAlignment.Center; textLabel.TextYAlignment=Enum.TextYAlignment.Center; Instance.new("UICorner",textLabel).CornerRadius=UDim.new(0,3); local stroke=Instance.new("UIStroke",textLabel); stroke.ApplyStrokeMode=Enum.ApplyStrokeMode.Border; stroke.Color=THEME.ExcludeLabelOutline; stroke.Thickness=1; stroke.Transparency=0.3; end; billboard.Enabled=(not isStealthMode or panelVisible); else if billboard then billboard:Destroy() end end end
function updateAllExcludedLabelsVisibility() local desiredVisibility = (not isStealthMode or panelVisible); for plr_obj, _ in pairs(excludedPlayers) do if plr_obj and plr_obj.Character and plr_obj.Character:FindFirstChild("Head") then local billboard = plr_obj.Character.Head:FindFirstChild("ExcludeLabel"); if billboard then billboard.Enabled = desiredVisibility end end end end
function applyHighlight(p) if p == player then return end; local existing = Storage:FindFirstChild(p.Name); if existing then existing:Destroy() end; local highlight = Instance.new("Highlight", Storage); highlight.Name = p.Name; highlight.FillColor = p.Team and p.Team.TeamColor.Color or Color3.fromRGB(255,255,255); highlight.FillTransparency = 0.5; highlight.OutlineColor = Color3.fromRGB(255,255,255); highlight.OutlineTransparency = 0; highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop; highlight.Enabled = isESPEnabled; if p.Character then highlight.Adornee = p.Character end; p.CharacterAdded:Connect(function(c) if highlight and highlight.Parent then highlight.Adornee = c end end); p.CharacterRemoving:Connect(function() if highlight and highlight.Parent then highlight.Adornee = nil end end); return highlight end
function removeHighlight(p) if p then local existing = Storage:FindFirstChild(p.Name); if existing then existing:Destroy() end end end
function toggleESP(enabled) if isStealthMode and enabled then return end; isESPEnabled = enabled; if enabled then for _, p_ in pairs(Players:GetPlayers()) do if p_ ~= player then local h = Storage:FindFirstChild(p_.Name); if h then h.Enabled = true else applyHighlight(p_) end end end else for _, hl in pairs(Storage:GetChildren()) do if hl:IsA("Highlight") then hl.Enabled = false end end end; if GuiElements.espButton then local newStateText = isESPEnabled and "ESP: ON" or "ESP: OFF"; local newTextColor = isESPEnabled and THEME.Success or THEME.Error; GuiElements.espButton.Text = newStateText; GuiElements.espButton:SetAttribute("CurrentTextColor", newTextColor); TweenService:Create(GuiElements.espButton, TextColorTweenInfo, { TextColor3 = newTextColor }):Play() end end
function getShootEvent() local remotes = ReplicatedStorage:FindFirstChild("Remotes"); return remotes and remotes:FindFirstChild("Shoot") end
function findTool() if character then for _, child in pairs(character:GetChildren()) do if child:IsA("Tool") then return child end end end; if backpack then for _, child in pairs(backpack:GetChildren()) do if child:IsA("Tool") then return child end end end; return nil end
function isVisible(targetCharacter) if not character or not character:FindFirstChild("HumanoidRootPart") then return false end; local startPos = character.HumanoidRootPart.Position; local partsToCheck = {"Head","LeftHand","RightHand","LeftFoot","RightFoot","HumanoidRootPart"}; local raycastParams = RaycastParams.new(); raycastParams.FilterDescendantsInstances = {character,Storage}; raycastParams.FilterType = Enum.RaycastFilterType.Blacklist; raycastParams.IgnoreWater = true; for _, partName in pairs(partsToCheck) do local targetPart = targetCharacter:FindFirstChild(partName); if targetPart then local targetPos = targetPart.Position; local direction = targetPos - startPos; local distance = direction.Magnitude; if distance < 0.1 then continue end; local rayResult = workspace:Raycast(startPos, direction.Unit * distance, raycastParams); if not rayResult or rayResult.Instance:IsDescendantOf(targetCharacter) then return true end end end; return false end
function isWithinFOV(targetPart) if not character or not character:FindFirstChild("HumanoidRootPart") then return false end; local cameraCFrame = Camera.CFrame; local targetPos = targetPart.Position; local cameraPos = cameraCFrame.Position; if (targetPos - cameraPos).Magnitude < 0.1 then return true end; local directionToTarget = (targetPos - cameraPos).Unit; local cameraLook = cameraCFrame.LookVector; local dot = math.clamp(directionToTarget:Dot(cameraLook), -1, 1); local angle = math.deg(math.acos(dot)); return angle <= (targetingFOV / 2) end
function setupToolListener(toolInstance) if activatedConnection then activatedConnection:Disconnect(); activatedConnection = nil end; if currentTool and currentTool ~= toolInstance and not currentTool.Enabled then pcall(function() currentTool.Enabled = true end) end; currentTool = toolInstance; if toolInstance and toolInstance:IsA("Tool") then local cooldownActive = currentEffectiveCooldown > 0 and (tick() - lastShotTime < currentEffectiveCooldown); pcall(function() toolInstance.Enabled = not cooldownActive end); activatedConnection = toolInstance.Activated:Connect(function() lastShotTime = tick(); currentEffectiveCooldown = calculateEffectiveCooldown(toolInstance); if toolInstance then pcall(function() toolInstance.Enabled = false end) end end) else currentEffectiveCooldown = 0 end end
function findClosestEnemy() local maxDistance = 400; local closestEnemy = nil; local closestDistance = maxDistance; local playerRootPart = character and character:FindFirstChild("HumanoidRootPart"); if not playerRootPart then return nil end; local playerRootPos = playerRootPart.Position; local myTeam = player.Team; if not myTeam then return nil end; for _, targetPlayer in pairs(Players:GetPlayers()) do if targetPlayer ~= player and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and targetPlayer.Character:FindFirstChildOfClass("Humanoid") then local targetChar = targetPlayer.Character; local targetRoot = targetChar.HumanoidRootPart; local targetHumanoid = targetChar:FindFirstChildOfClass("Humanoid"); local targetTeam = targetPlayer.Team; local isActualOpponent = false; if targetTeam then if myTeam.Name == "Team1" and targetTeam.Name == "Team2" then isActualOpponent = true elseif myTeam.Name == "Team2" and targetTeam.Name == "Team1" then isActualOpponent = true end end; if targetHumanoid.Health > 0 and not excludedPlayers[targetPlayer] and isActualOpponent then local distance = (playerRootPos - targetRoot.Position).Magnitude; if distance < closestDistance then if isVisible(targetChar) and isWithinFOV(targetRoot) then closestDistance = distance; closestEnemy = targetPlayer; end end end end end; return closestEnemy end
function shoot() if not isAutoTargetEnabled then return end; if not character or not character.Parent then return end; if not character:FindFirstChild("HumanoidRootPart") then return end; local tool = currentTool; if not tool or tool.Parent ~= character then tool = findTool(); if tool and tool.Parent == character then setupToolListener(tool) else return end end; local shootEvent = getShootEvent(); if not shootEvent then return end; local effectiveCooldown = calculateEffectiveCooldown(tool); local currentTime = tick(); if currentTime - lastShotTime < effectiveCooldown then return end; local targetEnemy = findClosestEnemy(); if targetEnemy and targetEnemy.Character and targetEnemy.Character:FindFirstChild("HumanoidRootPart") then lastShotTime = currentTime; currentEffectiveCooldown = effectiveCooldown; local toolAtDecision = tool; local fireSoundAtDecision = tool:FindFirstChild("Fire"); local bulletTypeAtDecision = tool:GetAttribute("BulletType"); local startPosAtDecision; local muzzleAttach = tool:FindFirstChild("Muzzle", true); if muzzleAttach and muzzleAttach:IsA("Attachment") then startPosAtDecision = muzzleAttach.WorldPosition else local handle = tool:FindFirstChild("Handle"); startPosAtDecision = (handle and handle:IsA("BasePart") and handle.Position) or character.HumanoidRootPart.Position end; task.spawn(function() if shootDelayMilliseconds > 0 then task.wait(shootDelayMilliseconds / 1000) end; if not toolAtDecision or toolAtDecision.Parent ~= character then return end; if not character or not character.Parent then return end; if not targetEnemy or not targetEnemy.Parent or not targetEnemy.Character or not targetEnemy.Character.Parent then return end; local targetHumanoid = targetEnemy.Character:FindFirstChildOfClass("Humanoid"); local targetRootPart = targetEnemy.Character:FindFirstChild("HumanoidRootPart"); if not targetHumanoid or not targetRootPart or targetHumanoid.Health <= 0 or excludedPlayers[targetEnemy] then return end; local currentTargetPos = targetRootPart.Position; local currentTargetPart = targetRootPart; local successFire, _ = pcall(function() shootEvent:FireServer(character.HumanoidRootPart.Position, currentTargetPos, currentTargetPart, currentTargetPos) end); if successFire then if fireSoundAtDecision and fireSoundAtDecision:IsA("Sound") then pcall(function() fireSoundAtDecision:Play() end) end; if BulletRenderer_upvr and muzzleAttach then pcall(function() BulletRenderer_upvr(startPosAtDecision, currentTargetPos, bulletTypeAtDecision) end) end; pcall(function() toolAtDecision:Activate() end); task.wait(); if toolAtDecision and toolAtDecision.Parent == character then pcall(function() toolAtDecision.Enabled = false end) end end end) end end

function getTooltipLabel(parent) if TooltipLabel and TooltipLabel.Parent then return TooltipLabel end; TooltipLabel = Instance.new("Frame", parent); TooltipLabel.Name = "TooltipFrame"; local ttSizeX, ttSizeY, ttPadLR, ttPadTB, ttBoundsAddX, ttBoundsAddY; if currentGuiSizeMode=="Phone" then ttSizeX=70;ttSizeY=20;ttPadLR=4;ttPadTB=2;ttBoundsAddX=8;ttBoundsAddY=4 elseif currentGuiSizeMode=="Tablet" then ttSizeX=100;ttSizeY=25;ttPadLR=5;ttPadTB=3;ttBoundsAddX=10;ttBoundsAddY=6 else ttSizeX=110;ttSizeY=28;ttPadLR=6;ttPadTB=3;ttBoundsAddX=12;ttBoundsAddY=7 end; TooltipLabel.Size=UDim2.new(0,ttSizeX,0,ttSizeY); TooltipLabel.BackgroundColor3=THEME.Tooltip; TooltipLabel.BackgroundTransparency=0.05; TooltipLabel.BorderSizePixel=0; TooltipLabel.Position=UDim2.new(0,0,0,0); TooltipLabel.ZIndex=100; TooltipLabel.Visible=false; TooltipLabel.ClipsDescendants=true; Instance.new("UICorner",TooltipLabel).CornerRadius=UDim.new(0,3); local p=Instance.new("UIPadding",TooltipLabel); p.PaddingLeft=UDim.new(0,ttPadLR); p.PaddingRight=UDim.new(0,ttPadLR);p.PaddingTop=UDim.new(0,ttPadTB);p.PaddingBottom=UDim.new(0,ttPadTB); local t=Instance.new("TextLabel",TooltipLabel);t.Name="TooltipText";t.Size=UDim2.fromScale(1,1);t.BackgroundTransparency=1;t.TextColor3=THEME.TextDisabled;t.Font=THEME.Font;t.TextSize=THEME.SmallTextSize;t.TextXAlignment=Enum.TextXAlignment.Center;t.TextYAlignment=Enum.TextYAlignment.Center;t.Text="Tooltip";t.ZIndex=101;t.RichText=true;Instance.new("UITextSizeConstraint",t).MaxTextSize=THEME.SmallTextSize; local function uS() task.wait(); if not t or not t.Parent then return end; TooltipLabel.Size=UDim2.new(0,t.TextBounds.X+ttBoundsAddX,0,t.TextBounds.Y+ttBoundsAddY) end; t:GetPropertyChangedSignal("Text"):Connect(uS);uS(); return TooltipLabel end
function showTooltip(guiObject, text) if not TooltipLabel or not TooltipLabel.Parent then return end local textLabel = TooltipLabel:FindFirstChild("TooltipText"); if not textLabel then return end; textLabel.Text = text; local mousePos = UserInputService:GetMouseLocation(); local guiInset = GuiService:GetGuiInset(); local offsetX, offsetY; if currentGuiSizeMode=="Phone" then offsetX=12;offsetY=8 elseif currentGuiSizeMode=="Tablet" then offsetX=15;offsetY=10 else offsetX=18;offsetY=12 end; TooltipLabel.Position = UDim2.new(0, mousePos.X + offsetX, 0, mousePos.Y - guiInset.Y + offsetY); task.wait(); local viewportSize = Camera.ViewportSize; local absSize = TooltipLabel.AbsoluteSize; local currentPosX, currentPosY = TooltipLabel.Position.X.Offset, TooltipLabel.Position.Y.Offset; if currentPosX + absSize.X > viewportSize.X then currentPosX = mousePos.X - absSize.X - offsetX end; if currentPosY + absSize.Y > viewportSize.Y - guiInset.Y then currentPosY = mousePos.Y - absSize.Y - offsetY - guiInset.Y end; TooltipLabel.Position = UDim2.new(0, currentPosX, 0, currentPosY); TooltipLabel.Visible = true end
function hideTooltip() if TooltipLabel then TooltipLabel.Visible = false end end
function createStyledButton(parent, initialText, initialTextColor, position, size, tooltipText) local button = Instance.new("TextButton", parent); button.Size = size; button.Position = position; button.BackgroundColor3 = THEME.ButtonBackground; button.Font = THEME.Font; button.Text = initialText; button.TextColor3 = initialTextColor; button.TextSize = THEME.TextSize; button.AutoButtonColor = false; button.ClipsDescendants = true; Instance.new("UICorner", button).CornerRadius = UDim.new(0, THEME.CornerRadius); local stroke = Instance.new("UIStroke", button); stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; stroke.Color = THEME.ButtonOutline; stroke.Thickness = THEME.ButtonOutlineThickness; stroke.Transparency = THEME.StrokeTransparency; local uiScale = Instance.new("UIScale", button); uiScale.Scale = 1; button:SetAttribute("Hovering", false); button:SetAttribute("Tooltip", tooltipText or ""); button:SetAttribute("CurrentTextColor", initialTextColor); local hoverTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.Out); local pressTweenInfo = TweenInfo.new(THEME.AnimationSpeed * 0.6, Enum.EasingStyle.Sine, Enum.EasingDirection.Out); local scaleTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Back, Enum.EasingDirection.Out); button.MouseEnter:Connect(function() button:SetAttribute("Hovering", true); TweenService:Create(stroke, hoverTweenInfo, { Color = THEME.ButtonOutlineHover }):Play(); TweenService:Create(button, hoverTweenInfo, { BackgroundColor3 = THEME.ButtonBackgroundHover }):Play(); TweenService:Create(uiScale, scaleTweenInfo, { Scale = THEME.ScaleFactorHover }):Play(); if button:GetAttribute("Tooltip") ~= "" then showTooltip(button, button:GetAttribute("Tooltip")) end end); button.MouseLeave:Connect(function() button:SetAttribute("Hovering", false); TweenService:Create(stroke, hoverTweenInfo, { Color = THEME.ButtonOutline }):Play(); TweenService:Create(button, hoverTweenInfo, { BackgroundColor3 = THEME.ButtonBackground }):Play(); TweenService:Create(uiScale, scaleTweenInfo, { Scale = 1 }):Play(); hideTooltip() end); button.MouseButton1Down:Connect(function() TweenService:Create(uiScale, pressTweenInfo, { Scale = THEME.ScaleFactorPress }):Play(); hideTooltip() end); button.MouseButton1Up:Connect(function() local targetScale = button:GetAttribute("Hovering") and THEME.ScaleFactorHover or 1; local targetBgColor = button:GetAttribute("Hovering") and THEME.ButtonBackgroundHover or THEME.ButtonBackground; local targetOutlineColor = button:GetAttribute("Hovering") and THEME.ButtonOutlineHover or THEME.ButtonOutline; TweenService:Create(uiScale, scaleTweenInfo, { Scale = targetScale }):Play(); TweenService:Create(button, hoverTweenInfo, { BackgroundColor3 = targetBgColor }):Play(); TweenService:Create(stroke, hoverTweenInfo, { Color = targetOutlineColor }):Play(); if button:GetAttribute("Hovering") and button:GetAttribute("Tooltip") ~= "" then showTooltip(button, button:GetAttribute("Tooltip")) end end); return button end
function updateSliderStyle(sliderContainer, value, isEnabled) if not sliderContainer or not sliderContainer:IsA("Frame") then return end local valueLabel = sliderContainer:FindFirstChild("ValueLabel") local sliderTrack = sliderContainer:FindFirstChild("SliderTrack") if not valueLabel or not sliderTrack then return end local sliderFill = sliderTrack:FindFirstChild("SliderFill") local sliderThumb = sliderTrack:FindFirstChild("SliderThumb") if not sliderFill or not sliderThumb then return end local minValue = sliderContainer:GetAttribute("MinValue") or 0 local maxValue = sliderContainer:GetAttribute("MaxValue") or 100 local range = maxValue - minValue if range <= 0 then range = 1 end local percentage = math.clamp((value - minValue) / range, 0, 1) sliderThumb.Position = UDim2.new(percentage, 0, 0.5, 0) sliderFill.Size = UDim2.new(percentage, 0, 1, 0) valueLabel.Text = tostring(math.floor(value)) local thumbColor = isEnabled and THEME.AccentAlt or THEME.Tertiary local fillColor = isEnabled and THEME.Accent or THEME.Tertiary local valueColor = isEnabled and THEME.Text or THEME.TextDisabled local trackColor = isEnabled and THEME.SliderTrack or THEME.SliderTrackDisabled local thumbBorderColor = isEnabled and THEME.SliderThumbBorder or THEME.SliderThumbBorderDisabled sliderThumb.BackgroundColor3 = thumbColor sliderFill.BackgroundColor3 = fillColor valueLabel.TextColor3 = valueColor sliderTrack.BackgroundColor3 = trackColor sliderThumb.BorderColor3 = thumbBorderColor end
function setSliderEnabled(sliderContainer, enabled) if not sliderContainer or not sliderContainer:IsA("Frame") then return end sliderContainer:SetAttribute("Enabled", enabled) local valueLabel = sliderContainer:FindFirstChild("ValueLabel") local currentVal = tonumber(valueLabel and valueLabel.Text or sliderContainer:GetAttribute("InitialValue") or 0) updateSliderStyle(sliderContainer, currentVal, enabled) end
function setSliderValue(sliderContainer, value) if not sliderContainer or not sliderContainer:IsA("Frame") then return end local minValue = sliderContainer:GetAttribute("MinValue") or 0 local maxValue = sliderContainer:GetAttribute("MaxValue") or 100 local clampedValue = math.clamp(value, minValue, maxValue) local isEnabled = sliderContainer:GetAttribute("Enabled") updateSliderStyle(sliderContainer, clampedValue, isEnabled); end
function createSlider(parent, labelText, minValue, maxValue, initialValue, valueChangedCallback, tooltipText) local container = Instance.new("Frame"); local sliderSizeMultiplier; if currentGuiSizeMode=="Phone" then sliderSizeMultiplier=1.4 elseif currentGuiSizeMode=="Tablet" then sliderSizeMultiplier=1.5 else sliderSizeMultiplier=1.6 end; container.Size = UDim2.new(1, 0, 0, THEME.ElementHeight * sliderSizeMultiplier); container.BackgroundTransparency = 1; container.Parent = parent; container:SetAttribute("Tooltip", tooltipText or ""); container:SetAttribute("Enabled", true); container:SetAttribute("MinValue", minValue); container:SetAttribute("MaxValue", maxValue); container:SetAttribute("InitialValue", initialValue); local label = Instance.new("TextLabel", container); label.Size = UDim2.new(0.7, -(THEME.Padding), 0, THEME.SmallElementHeight); label.Position = UDim2.new(0,0,0,0); label.BackgroundTransparency=1; label.TextColor3=THEME.TextDisabled; label.Font=THEME.Font; label.TextSize=THEME.SmallTextSize; label.Text=labelText; label.TextXAlignment=Enum.TextXAlignment.Left; local valueLabel=Instance.new("TextLabel",container); valueLabel.Name="ValueLabel"; valueLabel.Size=UDim2.new(0.3,0,0,THEME.SmallElementHeight); valueLabel.Position=UDim2.new(0.7,0,0,0); valueLabel.BackgroundTransparency=1; valueLabel.TextColor3=THEME.Text; valueLabel.Font=THEME.Font; valueLabel.TextSize=THEME.SmallTextSize; valueLabel.Text=tostring(math.floor(initialValue)); valueLabel.TextXAlignment=Enum.TextXAlignment.Right; local sliderTrack=Instance.new("Frame",container); sliderTrack.Name="SliderTrack"; local trackHeightOffset, trackPosYOffset, trackStrokeThicknessVal, thumbBorderSizeVal; if currentGuiSizeMode=="Phone" then trackHeightOffset=2;trackPosYOffset=THEME.Padding/2;trackStrokeThicknessVal=0.5;thumbBorderSizeVal=1 elseif currentGuiSizeMode=="Tablet" then trackHeightOffset=6;trackPosYOffset=4;trackStrokeThicknessVal=1;thumbBorderSizeVal=2 else trackHeightOffset=7;trackPosYOffset=5;trackStrokeThicknessVal=1.2;thumbBorderSizeVal=2 end; sliderTrack.Size=UDim2.new(1,0,0,THEME.SliderHeight+trackHeightOffset); sliderTrack.Position=UDim2.new(0,0,1,-(THEME.SliderHeight+trackHeightOffset)-trackPosYOffset); sliderTrack.BackgroundColor3=THEME.SliderTrack; Instance.new("UICorner",sliderTrack).CornerRadius=UDim.new(0,(THEME.SliderHeight+trackHeightOffset)/2); local trackStroke=Instance.new("UIStroke",sliderTrack); trackStroke.ApplyStrokeMode=Enum.ApplyStrokeMode.Border; trackStroke.Color=THEME.Tertiary; trackStroke.Thickness=trackStrokeThicknessVal; trackStroke.Transparency=0.7; local sliderFill=Instance.new("Frame",sliderTrack); sliderFill.Name="SliderFill"; sliderFill.Size=UDim2.new(0,0,1,0); sliderFill.BackgroundColor3=THEME.Accent; sliderFill.BorderSizePixel=0; Instance.new("UICorner",sliderFill).CornerRadius=UDim.new(0,(THEME.SliderHeight+trackHeightOffset)/2); local sliderThumb=Instance.new("Frame",sliderTrack); sliderThumb.Name="SliderThumb"; local thumbActualSize=THEME.SliderThumbSize; sliderThumb.Size=UDim2.fromOffset(thumbActualSize,thumbActualSize); sliderThumb.AnchorPoint=Vector2.new(0.5,0.5); sliderThumb.Position=UDim2.new(0,0,0.5,0); sliderThumb.BackgroundColor3=THEME.AccentAlt; sliderThumb.BorderSizePixel=thumbBorderSizeVal; sliderThumb.BorderColor3=THEME.SliderThumbBorder; Instance.new("UICorner",sliderThumb).CornerRadius=UDim.new(0.5,0); local thumbScale=Instance.new("UIScale",sliderThumb); thumbScale.Scale=1; local dragging=false; local inputChangedConn,inputEndedConn=nil,nil; local thumbTweenInfo=TweenInfo.new(0.15,Enum.EasingStyle.Back,Enum.EasingDirection.Out); local function updateSlider(inputPos) if not container:GetAttribute("Enabled") then return end local relativePos=sliderTrack.AbsolutePosition; local trackSize=sliderTrack.AbsoluteSize; if trackSize.X<=0 then return end local thumbRadius=sliderThumb.AbsoluteSize.X/2; local usableWidth=trackSize.X-(thumbRadius*2); if usableWidth<=0 then usableWidth=1 end local rawX=inputPos.X-relativePos.X-thumbRadius; local percentage=math.clamp(rawX/usableWidth,0,1); local value=minValue+(maxValue-minValue)*percentage; local newValue=math.floor(value); updateSliderStyle(container,newValue,true); if valueChangedCallback then valueChangedCallback(newValue) end end; updateSliderStyle(container,initialValue,true); local function onInputBegan(input) if not container:GetAttribute("Enabled") then return end; if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then dragging=true; TweenService:Create(thumbScale,thumbTweenInfo,{Scale=1.1}):Play(); updateSlider(input.Position); hideTooltip(); if inputChangedConn then inputChangedConn:Disconnect() end; if inputEndedConn then inputEndedConn:Disconnect() end; inputEndedConn=input.Changed:Connect(function() if input.UserInputState==Enum.UserInputState.End then dragging=false; TweenService:Create(thumbScale,thumbTweenInfo,{Scale=1}):Play(); if inputChangedConn then inputChangedConn:Disconnect(); inputChangedConn=nil end; if inputEndedConn then inputEndedConn:Disconnect(); inputEndedConn=nil end end end); inputChangedConn=RunService.RenderStepped:Connect(function() if dragging then updateSlider(UserInputService:GetMouseLocation()) else if inputChangedConn then inputChangedConn:Disconnect(); inputChangedConn=nil end end end) end end; sliderTrack.InputBegan:Connect(onInputBegan); sliderThumb.InputBegan:Connect(onInputBegan); container.MouseEnter:Connect(function() if container:GetAttribute("Tooltip")~="" and not dragging then showTooltip(container,container:GetAttribute("Tooltip")) end end); container.MouseLeave:Connect(function() if not dragging then hideTooltip() end end); return container,valueLabel end
function updatePlayerListGUI() if not GuiElements.playerListFrame or not GuiElements.playerListFrame.Parent then return end; if not character or not character:FindFirstChild("HumanoidRootPart") then return end; local existingButtons = {}; for _, child in ipairs(GuiElements.playerListFrame:GetChildren()) do if child:IsA("TextButton") and child.Name:match("_Entry$") then local userIdAttr = child:GetAttribute("PlayerUserId"); if userIdAttr then existingButtons[userIdAttr] = child end end end; local nearby = {}; local playerRootPos = character.HumanoidRootPart.Position; local displayRange = 50; for _, p_ in pairs(Players:GetPlayers()) do if p_ ~= player and p_.Character and p_.Character:FindFirstChild("HumanoidRootPart") then local targetHumanoid = p_.Character:FindFirstChildOfClass("Humanoid"); if targetHumanoid and targetHumanoid.Health > 0 then local targetRootPos = p_.Character.HumanoidRootPart.Position; local dist = (playerRootPos - targetRootPos).Magnitude; if dist <= displayRange then table.insert(nearby, {Player = p_, Dist = dist}) end end end end; table.sort(nearby, function(a, b) return a.Dist < b.Dist end); local itemPaddingTotal = THEME.Padding*1.5; local distLabelWidth; if currentGuiSizeMode=="Phone" then distLabelWidth=25 elseif currentGuiSizeMode=="Tablet" then distLabelWidth=30 else distLabelWidth=35 end; local iconSize = THEME.IconSize; local teamIndicatorWidth = THEME.Padding/2 + (currentGuiSizeMode=="Phone" and 1 or (currentGuiSizeMode=="Tablet" and 2 or 2.5)); local iconSectionWidth = iconSize + THEME.Padding/2 + teamIndicatorWidth + THEME.Padding/2; for i, data in ipairs(nearby) do local p = data.Player; local userId = p.UserId; local btn = existingButtons[userId]; if btn then btn.LayoutOrder = i; local distLabel = btn:FindFirstChild("DistLabel", true); if distLabel then distLabel.Text = math.floor(data.Dist) .. "m" end; local isExcluded = excludedPlayers[p]; local nameLabel = btn:FindFirstChild("NameLabel", true); if nameLabel then nameLabel.TextColor3 = isExcluded and THEME.RefExcludedColor or THEME.TextPlayerListNormal end; local excludeIcon = btn:FindFirstChild("ExcludeIcon", true); if excludeIcon then excludeIcon.Text = isExcluded and "✕" or "✓"; excludeIcon.TextColor3 = isExcluded and THEME.ExcludedIcon or THEME.Success; end; updateExcludedLabel(p); existingButtons[userId] = nil else btn = Instance.new("TextButton"); btn.Name = p.Name .. "_Entry"; btn.Size = UDim2.new(1, 0, 0, THEME.SmallElementHeight); btn.BackgroundColor3 = THEME.Primary; btn.BackgroundTransparency = 0.1; btn.Text = ""; btn.LayoutOrder = i; btn:SetAttribute("PlayerUserId", userId); btn.Parent = GuiElements.playerListFrame; Instance.new("UICorner", btn).CornerRadius = UDim.new(0, THEME.CornerRadius / 2); local itemStroke = Instance.new("UIStroke", btn); itemStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; itemStroke.Color = THEME.Tertiary; local itemStrokeThickness; if currentGuiSizeMode=="Phone" then itemStrokeThickness=0.8 elseif currentGuiSizeMode=="Tablet" then itemStrokeThickness=1 else itemStrokeThickness=1.2 end; itemStroke.Thickness = THEME.StrokeThickness * itemStrokeThickness; itemStroke.Transparency = 0.7; local itemPadding = Instance.new("UIPadding", btn); itemPadding.PaddingLeft = UDim.new(0, THEME.Padding/2); itemPadding.PaddingRight = UDim.new(0, THEME.Padding/2); local excludeIcon = Instance.new("TextLabel", btn); excludeIcon.Name = "ExcludeIcon"; excludeIcon.Size = UDim2.fromOffset(iconSize, iconSize); excludeIcon.Position=UDim2.fromScale(0,0.5); excludeIcon.AnchorPoint=Vector2.new(0,0.5); excludeIcon.BackgroundTransparency = 1; excludeIcon.Font = Enum.Font.SourceSansBold; local isExcluded = excludedPlayers[p]; excludeIcon.Text = isExcluded and "✕" or "✓"; excludeIcon.TextColor3 = isExcluded and THEME.ExcludedIcon or THEME.Success; excludeIcon.TextSize = iconSize; local teamColorIndicator = Instance.new("Frame", btn); teamColorIndicator.Size = UDim2.fromOffset(teamIndicatorWidth, iconSize * 0.8); teamColorIndicator.Position=UDim2.fromOffset(iconSize + THEME.Padding/2,0)+UDim2.fromScale(0,0.5); teamColorIndicator.AnchorPoint=Vector2.new(0,0.5); teamColorIndicator.BackgroundColor3 = p.Team and p.Team.TeamColor.Color or Color3.fromRGB(90,90,90); teamColorIndicator.BorderSizePixel = 0; Instance.new("UICorner", teamColorIndicator).CornerRadius = UDim.new(0, 2); local nameLabel = Instance.new("TextLabel", btn); nameLabel.Name = "NameLabel"; nameLabel.Size = UDim2.new(1, -(iconSectionWidth + distLabelWidth + itemPaddingTotal), 1, 0); nameLabel.Position=UDim2.fromOffset(iconSectionWidth,0); nameLabel.BackgroundTransparency = 1; nameLabel.Font = THEME.FontRegular; nameLabel.Text = p.Name; nameLabel.TextColor3 = isExcluded and THEME.RefExcludedColor or THEME.TextPlayerListNormal; nameLabel.TextSize = THEME.SmallTextSize; nameLabel.TextXAlignment = Enum.TextXAlignment.Left; local distLabel = Instance.new("TextLabel", btn); distLabel.Name = "DistLabel"; distLabel.Size = UDim2.new(0, distLabelWidth, 1, 0); distLabel.AnchorPoint=Vector2.new(1,0.5); distLabel.Position=UDim2.fromScale(1,0.5); distLabel.BackgroundTransparency = 1; distLabel.Font = THEME.FontRegular; distLabel.Text = math.floor(data.Dist) .. "m"; distLabel.TextColor3 = THEME.TextDisabled; distLabel.TextSize = THEME.SmallTextSize; distLabel.TextXAlignment = Enum.TextXAlignment.Right; updateExcludedLabel(p); btn.MouseEnter:Connect(function() TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundTransparency = 0}):Play() end); btn.MouseLeave:Connect(function() TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundTransparency = 0.1}):Play() end); btn.MouseButton1Click:Connect(function() excludedPlayers[p] = not excludedPlayers[p]; updateExcludedLabel(p); local isNowExcluded = excludedPlayers[p]; nameLabel.TextColor3 = isNowExcluded and THEME.RefExcludedColor or THEME.TextPlayerListNormal; excludeIcon.Text = isNowExcluded and "✕" or "✓"; excludeIcon.TextColor3 = isNowExcluded and THEME.ExcludedIcon or THEME.Success; end) end end; for _, oldBtn in pairs(existingButtons) do oldBtn:Destroy() end; if GuiElements.playerListFrame and GuiElements.playerListLayout and GuiElements.playerListFrame:IsA("ScrollingFrame") then local itemHeight = THEME.SmallElementHeight; local paddingOffset = GuiElements.playerListLayout.Padding.Offset; local childrenCount = 0; for _, child_obj in ipairs(GuiElements.playerListFrame:GetChildren()) do if child_obj:IsA("TextButton") and child_obj.Name:match("_Entry$") then childrenCount = childrenCount + 1 end end; local totalContentHeight; if childrenCount > 0 then totalContentHeight = childrenCount * (itemHeight + paddingOffset) - paddingOffset; else totalContentHeight = 0; end; GuiElements.playerListFrame.CanvasSize = UDim2.new(0,0,0, math.max(GuiElements.playerListFrame.Size.Y.Offset, totalContentHeight)); end end

function updateSizeModeIcon() if GuiElements.sizeModeIconLabel and GuiElements.sizeModeButton then local iconText, tooltipText; if currentGuiSizeMode == "Phone" then iconText = "📱"; tooltipText = "Tablet View (💻)" elseif currentGuiSizeMode == "Tablet" then iconText = "💻"; tooltipText = "PC View (🖥️)" else iconText = "🖥️"; tooltipText = "Phone View (📱)" end; GuiElements.sizeModeIconLabel.Text = iconText; GuiElements.sizeModeButton:SetAttribute("Tooltip", tooltipText) end end
function toggleSizeModeAndRebuild() local oldPanelVisibleState = panelVisible; if currentGuiSizeMode == "Phone" then currentGuiSizeMode = "Tablet" elseif currentGuiSizeMode == "Tablet" then currentGuiSizeMode = "PC" else currentGuiSizeMode = "Phone" end; if currentGuiSizeMode == "Phone" then THEME = THEME_PHONE_CONFIG elseif currentGuiSizeMode == "Tablet" then THEME = THEME_TABLET_CONFIG else THEME = THEME_PC_CONFIG end; updateTweenInfos(); if MainGui and MainGui.Parent then MainGui:Destroy(); MainGui = nil end; if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy(); TooltipLabel = nil end; GuiElements = {}; MainGui = createBeautifulGUI(); panelVisible = oldPanelVisibleState; if mainFrame and mainFrame.Parent then local currentAbsoluteWidth = mainFrame.AbsoluteSize.X; if currentAbsoluteWidth <= 0 then local sc = mainFrame:FindFirstChildOfClass("UISizeConstraint"); currentAbsoluteWidth = sc and sc.MaxSize.X or THEME.PanelMaxWidth end; if panelVisible then local safeInset = GuiService:GetGuiInset(); local targetXOffset = safeInset.X + THEME.Padding; mainFrame.Position = UDim2.new(0, targetXOffset, 0.5, 0); mainFrame.Visible = true else local targetXOffset = -(currentAbsoluteWidth + 20); mainFrame.Position = UDim2.new(0, targetXOffset, 0.5, 0); mainFrame.Visible = false end end; updateFOVCircle(); updateAllExcludedLabelsVisibility(); if panelVisible and GuiElements.playerListFrame then pcall(updatePlayerListGUI) end end
local function toggleStealthMode() isStealthMode = not isStealthMode; local targetTooltip = isStealthMode and "Switch to Normal Mode" or "Switch to Stealth Mode"; local targetStrokeColor = isStealthMode and THEME.Error or THEME.Accent; local targetCoreColor = isStealthMode and THEME.Error or THEME.Accent; local stealthBtnClickArea = GuiElements.stealthModeClickButton; local stealthBtnContainer = GuiElements.stealthModeStroke and GuiElements.stealthModeStroke.Parent; if stealthBtnClickArea then stealthBtnClickArea:SetAttribute("Tooltip", targetTooltip) end; if GuiElements.stealthModeStroke then TweenService:Create(GuiElements.stealthModeStroke, DimTweenInfo, { Color = targetStrokeColor }):Play() end; if GuiElements.stealthModeCore then TweenService:Create(GuiElements.stealthModeCore, DimTweenInfo, { BackgroundColor3 = targetCoreColor }):Play() end; if stealthBtnContainer then local pulseScale = stealthBtnContainer:FindFirstChildWhichIsA("UIScale") or Instance.new("UIScale", stealthBtnContainer); local pressTweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out); local releaseTweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out); local s1 = TweenService:Create(pulseScale, pressTweenInfo, {Scale = 0.9}); local s2 = TweenService:Create(pulseScale, releaseTweenInfo, {Scale = 1}); s1.Completed:Connect(function() s2:Play() end); s1:Play() end; local targetBgTrans = isStealthMode and 0.5 or 0; local targetTextTrans = isStealthMode and 0.3 or 0; local buttonsToFade = {GuiElements.fovChangerButton, GuiElements.resetFovButton, GuiElements.espButton}; for _, button in ipairs(buttonsToFade) do if button then TweenService:Create(button, DimTweenInfo, {BackgroundTransparency = targetBgTrans}):Play(); TweenService:Create(button, DimTweenInfo, {TextTransparency = targetTextTrans}):Play(); end end; if isStealthMode then isFOVChangerEnabled = false; Camera.FieldOfView = gameDefaultFOV; if GuiElements.fovChangerButton then GuiElements.fovChangerButton.Text = "FOV: OFF"; GuiElements.fovChangerButton.TextColor3 = THEME.Error; GuiElements.fovChangerButton:SetAttribute("CurrentTextColor", THEME.Error); end; if GuiElements.camFovSliderContainer then setSliderEnabled(GuiElements.camFovSliderContainer, false); setSliderValue(GuiElements.camFovSliderContainer, gameDefaultFOV); end; if isESPEnabled then toggleESP(false) end else if GuiElements.fovChangerButton then local initialFovTextColor = isFOVChangerEnabled and THEME.Success or THEME.Error; GuiElements.fovChangerButton.TextColor3 = initialFovTextColor; GuiElements.fovChangerButton:SetAttribute("CurrentTextColor", initialFovTextColor); GuiElements.fovChangerButton.Text = isFOVChangerEnabled and "FOV: ON" or "FOV: OFF"; end; if GuiElements.camFovSliderContainer then setSliderEnabled(GuiElements.camFovSliderContainer, isFOVChangerEnabled); setSliderValue(GuiElements.camFovSliderContainer, isFOVChangerEnabled and currentCameraFOV or gameDefaultFOV); end; if GuiElements.espButton then local initialEspTextColor = isESPEnabled and THEME.Success or THEME.Error; GuiElements.espButton.TextColor3 = initialEspTextColor; GuiElements.espButton:SetAttribute("CurrentTextColor", initialEspTextColor); GuiElements.espButton.Text = isESPEnabled and "ESP: ON" or "ESP: OFF"; end end; updateFOVCircle(); updateAllExcludedLabelsVisibility(); end
function createOrShowSizePrompt() if SizePromptGui and SizePromptGui.Parent then return end; SizePromptGui = Instance.new("ScreenGui", playerGui); SizePromptGui.Name = "MistSizePrompt"; SizePromptGui.ResetOnSpawn = false; SizePromptGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; SizePromptGui.DisplayOrder = 1000; local promptBaseTheme = THEME_TABLET_CONFIG; local promptFrame = Instance.new("Frame", SizePromptGui); promptFrame.Size = UDim2.new(0, 320, 0, 180); promptFrame.AnchorPoint = Vector2.new(0.5, 0.5); promptFrame.Position = UDim2.fromScale(0.5, 0.5); promptFrame.BackgroundColor3 = promptBaseTheme.Background; promptFrame.BorderSizePixel = 0; Instance.new("UICorner", promptFrame).CornerRadius = UDim.new(0, promptBaseTheme.CornerRadius); Instance.new("UIStroke", promptFrame).Color = promptBaseTheme.AccentAlt; local promptPadding = Instance.new("UIPadding", promptFrame); promptPadding.PaddingTop = UDim.new(0, promptBaseTheme.Padding * 2); promptPadding.PaddingBottom = UDim.new(0, promptBaseTheme.Padding * 2); promptPadding.PaddingLeft = UDim.new(0, promptBaseTheme.Padding * 2); promptPadding.PaddingRight = UDim.new(0, promptBaseTheme.Padding * 2); local promptListLayout = Instance.new("UIListLayout", promptFrame); promptListLayout.Padding = UDim.new(0, promptBaseTheme.Padding); promptListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; promptListLayout.SortOrder = Enum.SortOrder.LayoutOrder; local promptLabel = Instance.new("TextLabel", promptFrame); promptLabel.Size = UDim2.new(1, 0, 0, 40); promptLabel.BackgroundTransparency = 1; promptLabel.Font = promptBaseTheme.FontTitle; promptLabel.Text = "Choose GUI size based on your device:"; promptLabel.TextColor3 = promptBaseTheme.Text; promptLabel.TextSize = promptBaseTheme.TitleSize + 2; promptLabel.TextWrapped = true; promptLabel.LayoutOrder = 1; local function handleSizePromptChoice(chosenMode) currentGuiSizeMode = chosenMode; if chosenMode == "Phone" then THEME = THEME_PHONE_CONFIG elseif chosenMode == "Tablet" then THEME = THEME_TABLET_CONFIG else THEME = THEME_PC_CONFIG end; updateTweenInfos(); hasUserSelectedGUISize = true; if SizePromptGui then SizePromptGui:Destroy(); SizePromptGui = nil end; if MainGui and MainGui.Parent then MainGui:Destroy(); MainGui = nil end; if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy(); TooltipLabel = nil end; GuiElements = {}; MainGui = createBeautifulGUI(); panelVisible = true; if mainFrame and mainFrame.Parent then local safeInset = GuiService:GetGuiInset(); local targetXOffset = safeInset.X + THEME.Padding; mainFrame.Position = UDim2.new(0, targetXOffset, 0.5, 0); mainFrame.Visible = true; updateFOVCircle(); updateAllExcludedLabelsVisibility(); if GuiElements.playerListFrame then pcall(updatePlayerListGUI) end end end; local buttonHeight = 35; local phoneButton = createStyledButton(promptFrame, "📱 iPhone", promptBaseTheme.ButtonText, UDim2.new(), UDim2.new(1,0,0,buttonHeight), "Smaller, compact view"); phoneButton.LayoutOrder = 2; phoneButton.MouseButton1Click:Connect(function() handleSizePromptChoice("Phone") end); local tabletButton = createStyledButton(promptFrame, "💻 iPad/Tablet", promptBaseTheme.ButtonText, UDim2.new(), UDim2.new(1,0,0,buttonHeight), "Medium size view"); tabletButton.LayoutOrder = 3; tabletButton.MouseButton1Click:Connect(function() handleSizePromptChoice("Tablet") end); local pcButton = createStyledButton(promptFrame, "🖥️ PC/Desktop", promptBaseTheme.ButtonText, UDim2.new(), UDim2.new(1,0,0,buttonHeight), "Larger view for desktops"); pcButton.LayoutOrder = 4; pcButton.MouseButton1Click:Connect(function() handleSizePromptChoice("PC") end); end

function createBeautifulGUI() local guiName = "TheMistGUI_V26_SizePrompt"; local newScreenGui = Instance.new("ScreenGui", playerGui); newScreenGui.Name = guiName; newScreenGui.ResetOnSpawn = false; newScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; newScreenGui.DisplayOrder = 999; mainFrame = Instance.new("Frame", newScreenGui); mainFrame.Visible = false; mainFrame.AnchorPoint = Vector2.new(0,0.5); mainFrame.Size = UDim2.fromScale(0,0); mainFrame.AutomaticSize = Enum.AutomaticSize.Y; mainFrame.BackgroundColor3 = THEME.Background; mainFrame.BackgroundTransparency = 0; mainFrame.BorderSizePixel = 0; mainFrame.ClipsDescendants = true; mainFrame.ZIndex = 5; mainFrame.Active = true; mainFrame.Draggable = false; Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, THEME.CornerRadius); local sizeConstraint = Instance.new("UISizeConstraint", mainFrame); local minHeight; if currentGuiSizeMode=="Phone" then minHeight=150 elseif currentGuiSizeMode=="Tablet" then minHeight=190 else minHeight=210 end; sizeConstraint.MinSize = Vector2.new(THEME.PanelMinWidth, minHeight); sizeConstraint.MaxSize = Vector2.new(THEME.PanelMaxWidth, math.huge); local bgGradient = Instance.new("UIGradient", mainFrame); bgGradient.Rotation = 135; bgGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,THEME.BackgroundSlightlyLighter),ColorSequenceKeypoint.new(0.3,THEME.Background),ColorSequenceKeypoint.new(0.5,THEME.Primary),ColorSequenceKeypoint.new(0.8,THEME.BackgroundSubtleVariant),ColorSequenceKeypoint.new(1,THEME.BackgroundSlightlyLighter),}); bgGradient.Offset = Vector2.new(-1,-1); local padding = Instance.new("UIPadding", mainFrame); padding.PaddingTop = UDim.new(0,THEME.Padding); padding.PaddingBottom = UDim.new(0,THEME.Padding); padding.PaddingLeft = UDim.new(0,THEME.Padding); padding.PaddingRight = UDim.new(0,THEME.Padding); local listLayout = Instance.new("UIListLayout", mainFrame); listLayout.Padding = UDim.new(0,THEME.Padding); listLayout.SortOrder = Enum.SortOrder.LayoutOrder; listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; listLayout.FillDirection = Enum.FillDirection.Vertical; getTooltipLabel(newScreenGui); local titleFrame = Instance.new("Frame", mainFrame); titleFrame.Size = UDim2.new(1,0,0,THEME.TitleSize + 2); titleFrame.BackgroundTransparency = 1; titleFrame.LayoutOrder = 0; local stealthButtonSize = THEME.SmallElementHeight - (currentGuiSizeMode=="Phone" and 2 or 0); GuiElements.stealthModeContainer = Instance.new("Frame", titleFrame); GuiElements.stealthModeContainer.Name = "StealthModeContainer"; GuiElements.stealthModeContainer.Size = UDim2.fromOffset(stealthButtonSize, stealthButtonSize); GuiElements.stealthModeContainer.AnchorPoint = Vector2.new(1,0.5); GuiElements.stealthModeContainer.Position = UDim2.new(1,-THEME.Padding/2,0.5,0); GuiElements.stealthModeContainer.BackgroundColor3 = THEME.Primary; GuiElements.stealthModeContainer.BackgroundTransparency = 0.3; Instance.new("UICorner", GuiElements.stealthModeContainer).CornerRadius = UDim.new(0, currentGuiSizeMode=="Phone" and 3 or (currentGuiSizeMode=="Tablet" and 4 or 5)); GuiElements.stealthModeStroke = Instance.new("UIStroke", GuiElements.stealthModeContainer); GuiElements.stealthModeStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; GuiElements.stealthModeStroke.Color = isStealthMode and THEME.Error or THEME.Accent; GuiElements.stealthModeStroke.Thickness = 1; GuiElements.stealthModeStroke.Transparency = 0.2; GuiElements.stealthModeCore = Instance.new("Frame", GuiElements.stealthModeContainer); GuiElements.stealthModeCore.Name = "Core"; GuiElements.stealthModeCore.Size = UDim2.fromScale(0.5,0.5); GuiElements.stealthModeCore.AnchorPoint = Vector2.new(0.5,0.5); GuiElements.stealthModeCore.Position = UDim2.fromScale(0.5,0.5); GuiElements.stealthModeCore.BackgroundColor3 = isStealthMode and THEME.Error or THEME.Accent; GuiElements.stealthModeCore.BackgroundTransparency = 0.1; Instance.new("UICorner", GuiElements.stealthModeCore).CornerRadius = UDim.new(0.5,0); GuiElements.stealthModeClickButton = Instance.new("TextButton", GuiElements.stealthModeContainer); GuiElements.stealthModeClickButton.Name = "StealthClickArea"; GuiElements.stealthModeClickButton.Size=UDim2.fromScale(1,1); GuiElements.stealthModeClickButton.BackgroundTransparency=1; GuiElements.stealthModeClickButton.Text=""; GuiElements.stealthModeClickButton.ZIndex=2; GuiElements.stealthModeClickButton:SetAttribute("Tooltip", isStealthMode and "Switch to Normal Mode" or "Switch to Stealth Mode"); local scScale=Instance.new("UIScale",GuiElements.stealthModeContainer); scScale.Scale=1; local hvrTweenInfo=TweenInfo.new(0.15,Enum.EasingStyle.Quad,Enum.EasingDirection.Out); GuiElements.stealthModeClickButton.MouseEnter:Connect(function() TweenService:Create(scScale,hvrTweenInfo,{Scale=1.1}):Play(); local cSC=isStealthMode and THEME.Error or THEME.Accent; TweenService:Create(GuiElements.stealthModeStroke,hvrTweenInfo,{Color=cSC:Lerp(Color3.new(1,1,1),0.3),Transparency=0}):Play(); if GuiElements.stealthModeClickButton:GetAttribute("Tooltip")~="" then showTooltip(GuiElements.stealthModeClickButton,GuiElements.stealthModeClickButton:GetAttribute("Tooltip")) end end); GuiElements.stealthModeClickButton.MouseLeave:Connect(function() TweenService:Create(scScale,hvrTweenInfo,{Scale=1}):Play(); local cSC=isStealthMode and THEME.Error or THEME.Accent; TweenService:Create(GuiElements.stealthModeStroke,hvrTweenInfo,{Color=cSC,Transparency=0.2}):Play(); hideTooltip() end); GuiElements.stealthModeClickButton.MouseButton1Click:Connect(toggleStealthMode); local sizeModeButtonSize = THEME.SmallElementHeight - (currentGuiSizeMode=="Phone" and 2 or 0); GuiElements.sizeModeButton = Instance.new("TextButton", titleFrame); GuiElements.sizeModeButton.Name = "SizeModeButton"; GuiElements.sizeModeButton.Size = UDim2.fromOffset(sizeModeButtonSize, sizeModeButtonSize); GuiElements.sizeModeButton.AnchorPoint = Vector2.new(1,0.5); GuiElements.sizeModeButton.Position = UDim2.new(1,-(THEME.Padding/2 + stealthButtonSize + THEME.Padding/2),0.5,0); GuiElements.sizeModeButton.BackgroundColor3 = THEME.Primary; GuiElements.sizeModeButton.BackgroundTransparency = 0.3; Instance.new("UICorner", GuiElements.sizeModeButton).CornerRadius = UDim.new(0, currentGuiSizeMode=="Phone" and 3 or (currentGuiSizeMode=="Tablet" and 4 or 5)); local smbStroke = Instance.new("UIStroke", GuiElements.sizeModeButton); smbStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; smbStroke.Color = THEME.AccentAlt; smbStroke.Thickness = 1; smbStroke.Transparency = 0.4; GuiElements.sizeModeButton.Text = ""; GuiElements.sizeModeButton.ZIndex = 2; GuiElements.sizeModeIconLabel = Instance.new("TextLabel", GuiElements.sizeModeButton); GuiElements.sizeModeIconLabel.Name = "IconLabel"; GuiElements.sizeModeIconLabel.Size = UDim2.fromScale(1,1); GuiElements.sizeModeIconLabel.BackgroundTransparency = 1; GuiElements.sizeModeIconLabel.Font = Enum.Font.GothamBold; GuiElements.sizeModeIconLabel.TextSize = THEME.IconSize - (currentGuiSizeMode=="Phone" and 1 or (currentGuiSizeMode=="Tablet" and 2 or 3)); GuiElements.sizeModeIconLabel.TextColor3 = THEME.TextActive; GuiElements.sizeModeIconLabel.TextXAlignment = Enum.TextXAlignment.Center; GuiElements.sizeModeIconLabel.TextYAlignment = Enum.TextYAlignment.Center; updateSizeModeIcon(); GuiElements.sizeModeButton.MouseButton1Click:Connect(function() hideTooltip(); toggleSizeModeAndRebuild() end); local smbScale = Instance.new("UIScale", GuiElements.sizeModeButton); smbScale.Scale = 1; GuiElements.sizeModeButton.MouseEnter:Connect(function() TweenService:Create(smbScale, hvrTweenInfo, {Scale = 1.1}):Play(); TweenService:Create(smbStroke, hvrTweenInfo, {Color = THEME.Accent, Transparency = 0.1}):Play(); if GuiElements.sizeModeButton:GetAttribute("Tooltip") ~= "" then showTooltip(GuiElements.sizeModeButton, GuiElements.sizeModeButton:GetAttribute("Tooltip")) end end); GuiElements.sizeModeButton.MouseLeave:Connect(function() TweenService:Create(smbScale, hvrTweenInfo, {Scale = 1}):Play(); TweenService:Create(smbStroke, hvrTweenInfo, {Color = THEME.AccentAlt, Transparency = 0.4}):Play(); hideTooltip() end); local totalButtonsWidth = stealthButtonSize + sizeModeButtonSize + THEME.Padding*1.5; GuiElements.titleLabel = Instance.new("TextLabel", titleFrame); GuiElements.titleLabel.Size = UDim2.new(1, -totalButtonsWidth, 1, 0); GuiElements.titleLabel.Position = UDim2.fromOffset(0,0); GuiElements.titleLabel.BackgroundTransparency = 1; GuiElements.titleLabel.Text = "THE MIST"; GuiElements.titleLabel.TextColor3 = THEME.Accent; GuiElements.titleLabel.Font = THEME.FontTitle; GuiElements.titleLabel.TextSize = THEME.TitleSize; GuiElements.titleLabel.TextXAlignment = Enum.TextXAlignment.Left; GuiElements.subtitleLabel = Instance.new("TextLabel", mainFrame); GuiElements.subtitleLabel.Size = UDim2.new(1,-THEME.Padding*2,0,THEME.SubtitleSize + (currentGuiSizeMode=="Phone" and 1 or (currentGuiSizeMode=="Tablet" and 2 or 3))); GuiElements.subtitleLabel.Position = UDim2.fromOffset(THEME.Padding,0); GuiElements.subtitleLabel.BackgroundTransparency = 1; GuiElements.subtitleLabel.Text = "triggerbot-module v3.2"; GuiElements.subtitleLabel.TextColor3 = THEME.TextDisabled; GuiElements.subtitleLabel.Font = THEME.Font; GuiElements.subtitleLabel.TextSize = THEME.SubtitleSize; GuiElements.subtitleLabel.LayoutOrder = 1; GuiElements.subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left; GuiElements.mainControlsFrame = Instance.new("Frame", mainFrame); GuiElements.mainControlsFrame.Size = UDim2.new(1,0,0,THEME.ElementHeight*2 + THEME.Padding); GuiElements.mainControlsFrame.BackgroundTransparency = 1; GuiElements.mainControlsFrame.LayoutOrder = 2; local mainControlsLayout = Instance.new("UIListLayout", GuiElements.mainControlsFrame); mainControlsLayout.Padding = UDim.new(0,THEME.Padding); mainControlsLayout.SortOrder = Enum.SortOrder.LayoutOrder; mainControlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; local initialAutoTargetTextColor = isAutoTargetEnabled and THEME.Success or THEME.Error; local initialEspTextColor = isESPEnabled and THEME.Success or THEME.Error; GuiElements.autoTargetButton = createStyledButton(GuiElements.mainControlsFrame, "TARGET: OFF", initialAutoTargetTextColor, UDim2.new(), UDim2.new(1,0,0,THEME.ElementHeight), "Toggle Auto Targeting"); GuiElements.espButton = createStyledButton(GuiElements.mainControlsFrame, "ESP: ON", initialEspTextColor, UDim2.new(), UDim2.new(1,0,0,THEME.ElementHeight), "Toggle Player ESP"); GuiElements.autoTargetButton.Text = isAutoTargetEnabled and "TARGET: ON" or "TARGET: OFF"; GuiElements.espButton.Text = isESPEnabled and "ESP: ON" or "ESP: OFF"; GuiElements.espButton.BackgroundTransparency = isStealthMode and 0.5 or 0; GuiElements.espButton.TextTransparency = isStealthMode and 0.3 or 0; GuiElements.settingsFrame = Instance.new("Frame", mainFrame); GuiElements.settingsFrame.Size = UDim2.new(1,0,0,0); GuiElements.settingsFrame.AutomaticSize = Enum.AutomaticSize.Y; GuiElements.settingsFrame.BackgroundTransparency = 1; GuiElements.settingsFrame.LayoutOrder = 4; local settingsLayout = Instance.new("UIListLayout", GuiElements.settingsFrame); settingsLayout.Padding = UDim2.new(0,THEME.Padding + (currentGuiSizeMode=="Phone" and 0 or (currentGuiSizeMode=="Tablet" and 2 or 3))); settingsLayout.SortOrder = Enum.SortOrder.LayoutOrder; settingsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; settingsLayout.FillDirection = Enum.FillDirection.Vertical; local targetFovSliderContainer, targetFovValueLabel = createSlider(GuiElements.settingsFrame, "Target FOV", 0, 180, targetingFOV, function(value) targetingFOV = value; updateFOVCircle() end, "Aim assist Field of View (degrees)"); GuiElements.targetFovSliderContainer = targetFovSliderContainer; GuiElements.targetFovValueLabel = targetFovValueLabel; targetFovSliderContainer.LayoutOrder = 1; GuiElements.delayModeSwitcherFrame = Instance.new("TextButton", GuiElements.settingsFrame); GuiElements.delayModeSwitcherFrame.Name = "DelayModeSwitcherFrame"; GuiElements.delayModeSwitcherFrame.Size = UDim2.new(1,0,0,THEME.ElementHeight); GuiElements.delayModeSwitcherFrame.BackgroundTransparency = 1; GuiElements.delayModeSwitcherFrame.Text = ""; GuiElements.delayModeSwitcherFrame.AutoButtonColor = false; GuiElements.delayModeSwitcherFrame.LayoutOrder = 2; GuiElements.delayModeSwitcherFrame:SetAttribute("Tooltip", "Click to switch delay mode"); local switchTrack = Instance.new("Frame", GuiElements.delayModeSwitcherFrame); switchTrack.Name = "Track"; local trackSizeXOff,trackSizeYOff,trackCornerRadOff,trackStrokeThick; if currentGuiSizeMode=="Phone" then trackSizeXOff=-10;trackSizeYOff=-2;trackCornerRadOff=-1;trackStrokeThick=0.5 elseif currentGuiSizeMode=="Tablet" then trackSizeXOff=-20;trackSizeYOff=-4;trackCornerRadOff=0;trackStrokeThick=1 else trackSizeXOff=-22;trackSizeYOff=-5;trackCornerRadOff=0;trackStrokeThick=1.2 end; switchTrack.Size = UDim2.new(1,trackSizeXOff,1,trackSizeYOff); switchTrack.AnchorPoint=Vector2.new(0.5,0.5); switchTrack.Position=UDim2.fromScale(0.5,0.5); switchTrack.BackgroundColor3=THEME.PrimaryLighter; switchTrack.BackgroundTransparency=0.5; Instance.new("UICorner",switchTrack).CornerRadius=UDim.new(0,THEME.CornerRadius+trackCornerRadOff); local trackStroke=Instance.new("UIStroke",switchTrack); trackStroke.Color=THEME.Secondary; trackStroke.Transparency=0.6; trackStroke.Thickness=trackStrokeThick; GuiElements.delaySwitcherThumb=Instance.new("Frame",switchTrack); GuiElements.delaySwitcherThumb.Name="Thumb"; local thumbSizeXOff,thumbSizeYOff,thumbCornerRadOff; if currentGuiSizeMode=="Phone" then thumbSizeXOff=-1;thumbSizeYOff=-2;thumbCornerRadOff=-2 elseif currentGuiSizeMode=="Tablet" then thumbSizeXOff=-2;thumbSizeYOff=-4;thumbCornerRadOff=-2 else thumbSizeXOff=-2.5;thumbSizeYOff=-5;thumbCornerRadOff=-2 end; GuiElements.delaySwitcherThumb.Size=UDim2.new(0.5,thumbSizeXOff,1,thumbSizeYOff); GuiElements.delaySwitcherThumb.Position=UDim2.fromScale(0,0.5); GuiElements.delaySwitcherThumb.AnchorPoint=Vector2.new(0,0.5); GuiElements.delaySwitcherThumb.BackgroundColor3=THEME.Accent; GuiElements.delaySwitcherThumb.BorderSizePixel=0; Instance.new("UICorner",GuiElements.delaySwitcherThumb).CornerRadius=UDim.new(0,THEME.CornerRadius+thumbCornerRadOff); GuiElements.delayLabelBlatant=Instance.new("TextLabel",switchTrack); GuiElements.delayLabelBlatant.Name="LabelBlatant"; GuiElements.delayLabelBlatant.Size=UDim2.fromScale(0.5,1); GuiElements.delayLabelBlatant.Position=UDim2.fromScale(0,0.5); GuiElements.delayLabelBlatant.AnchorPoint=Vector2.new(0,0.5); GuiElements.delayLabelBlatant.BackgroundTransparency=1; GuiElements.delayLabelBlatant.Font=THEME.Font; GuiElements.delayLabelBlatant.Text="Blatant"; GuiElements.delayLabelBlatant.TextSize=THEME.SmallTextSize; GuiElements.delayLabelBlatant.TextColor3=THEME.TextDisabled; GuiElements.delayLabelBlatant.TextXAlignment=Enum.TextXAlignment.Center; GuiElements.delayLabelNormal=Instance.new("TextLabel",switchTrack); GuiElements.delayLabelNormal.Name="LabelNormal"; GuiElements.delayLabelNormal.Size=UDim2.fromScale(0.5,1); GuiElements.delayLabelNormal.Position=UDim2.fromScale(0.5,0.5); GuiElements.delayLabelNormal.AnchorPoint=Vector2.new(0,0.5); GuiElements.delayLabelNormal.BackgroundTransparency=1; GuiElements.delayLabelNormal.Font=THEME.Font; GuiElements.delayLabelNormal.Text="Normal"; GuiElements.delayLabelNormal.TextSize=THEME.SmallTextSize; GuiElements.delayLabelNormal.TextColor3=THEME.Text; GuiElements.delayLabelNormal.TextXAlignment=Enum.TextXAlignment.Center; local function updateSwitcherVisuals(newMode,skipAnim) local targetThumbPos=(newMode=="Blatant") and UDim2.fromScale(0,0.5) or UDim2.fromScale(0.5,0.5); local blatantColor=(newMode=="Blatant") and THEME.TextActive or THEME.TextDisabled; local normalColor=(newMode=="Normal") and THEME.TextActive or THEME.TextDisabled; if skipAnim then GuiElements.delaySwitcherThumb.Position=targetThumbPos; GuiElements.delayLabelBlatant.TextColor3=blatantColor; GuiElements.delayLabelNormal.TextColor3=normalColor else TweenService:Create(GuiElements.delaySwitcherThumb,SwitchAnimationInfo,{Position=targetThumbPos}):Play(); TweenService:Create(GuiElements.delayLabelBlatant,TextColorTweenInfo,{TextColor3=blatantColor}):Play(); TweenService:Create(GuiElements.delayLabelNormal,TextColorTweenInfo,{TextColor3=normalColor}):Play() end end; GuiElements.delayModeSwitcherFrame.MouseButton1Click:Connect(function() hideTooltip(); if currentDelayMode=="Normal" then currentDelayMode="Blatant"; shootDelayMilliseconds=0; updateSwitcherVisuals("Blatant") else currentDelayMode="Normal"; shootDelayMilliseconds=264; updateSwitcherVisuals("Normal") end end); GuiElements.delayModeSwitcherFrame.MouseEnter:Connect(function() if GuiElements.delayModeSwitcherFrame:GetAttribute("Tooltip")~="" then showTooltip(GuiElements.delayModeSwitcherFrame,GuiElements.delayModeSwitcherFrame:GetAttribute("Tooltip")) end end); GuiElements.delayModeSwitcherFrame.MouseLeave:Connect(hideTooltip); updateSwitcherVisuals(currentDelayMode,true); local camFovSliderContainer, camFovValueLabel = createSlider(GuiElements.settingsFrame, "Camera FOV", 30, 120, currentCameraFOV, function(value) if isFOVChangerEnabled then currentCameraFOV = value; Camera.FieldOfView = value; updateFOVCircle() end end, "Camera Field of View (degrees)"); GuiElements.camFovSliderContainer = camFovSliderContainer; GuiElements.camFovValueLabel = camFovValueLabel; camFovSliderContainer.LayoutOrder = 3; GuiElements.fovControlFrame = Instance.new("Frame", GuiElements.settingsFrame); GuiElements.fovControlFrame.Size = UDim2.new(1,0,0,THEME.SmallElementHeight*2 + THEME.Padding); GuiElements.fovControlFrame.BackgroundTransparency = 1; GuiElements.fovControlFrame.LayoutOrder = 4; local fovControlLayout = Instance.new("UIListLayout", GuiElements.fovControlFrame); fovControlLayout.Padding = UDim.new(0,THEME.Padding); fovControlLayout.SortOrder = Enum.SortOrder.LayoutOrder; fovControlLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; local initialFovTextColor = isFOVChangerEnabled and THEME.Success or THEME.Error; GuiElements.fovChangerButton = createStyledButton(GuiElements.fovControlFrame, "FOV: ON", initialFovTextColor, UDim2.new(), UDim2.new(1,0,0,THEME.SmallElementHeight), "Toggle Camera FOV Changer"); GuiElements.resetFovButton = createStyledButton(GuiElements.fovControlFrame, "RESET", THEME.ButtonText, UDim2.new(), UDim2.new(1,0,0,THEME.SmallElementHeight), "Reset Camera FOV to Game Default ("..tostring(math.floor(gameDefaultFOV))..")"); GuiElements.fovChangerButton.TextSize = THEME.SmallTextSize; GuiElements.resetFovButton.TextSize = THEME.SmallTextSize; GuiElements.fovChangerButton.Text = isFOVChangerEnabled and "FOV: ON" or "FOV: OFF"; GuiElements.fovChangerButton.BackgroundTransparency = isStealthMode and 0.5 or 0; GuiElements.fovChangerButton.TextTransparency = isStealthMode and 0.3 or 0; GuiElements.resetFovButton.BackgroundTransparency = isStealthMode and 0.5 or 0; GuiElements.resetFovButton.TextTransparency = isStealthMode and 0.3 or 0; setSliderEnabled(GuiElements.camFovSliderContainer, not isStealthMode and isFOVChangerEnabled); GuiElements.listTitle = Instance.new("TextLabel", mainFrame); GuiElements.listTitle.Size = UDim2.new(1,-THEME.Padding*2,0,THEME.SmallElementHeight); GuiElements.listTitle.Position = UDim2.fromOffset(THEME.Padding,0); GuiElements.listTitle.BackgroundTransparency = 1; GuiElements.listTitle.Text = "NEARBY ENTITIES"; GuiElements.listTitle.TextColor3 = THEME.TextDisabled; GuiElements.listTitle.Font = THEME.Font; GuiElements.listTitle.TextSize = THEME.SmallTextSize; GuiElements.listTitle.TextXAlignment = Enum.TextXAlignment.Left; GuiElements.listTitle.LayoutOrder = 6; local playerListHeight; if currentGuiSizeMode=="Phone" then playerListHeight=70 elseif currentGuiSizeMode=="Tablet" then playerListHeight=90 else playerListHeight=100 end; GuiElements.playerListFrame = Instance.new("ScrollingFrame", mainFrame); GuiElements.playerListFrame.Size = UDim2.new(1,0,0,playerListHeight); GuiElements.playerListFrame.BackgroundTransparency = 1; GuiElements.playerListFrame.BackgroundColor3 = THEME.BackgroundSlightlyLighter; GuiElements.playerListFrame.BorderSizePixel = 0; GuiElements.playerListFrame.LayoutOrder = 7; local scrollBarThick; if currentGuiSizeMode=="Phone" then scrollBarThick=2 elseif currentGuiSizeMode=="Tablet" then scrollBarThick=3 else scrollBarThick=3.5 end; GuiElements.playerListFrame.ScrollBarThickness = scrollBarThick; GuiElements.playerListFrame.ScrollBarImageColor3 = THEME.Accent; GuiElements.playerListFrame.CanvasSize = UDim2.new(0,0,0,0); GuiElements.playerListFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y; GuiElements.playerListFrame.ClipsDescendants = true; Instance.new("UICorner", GuiElements.playerListFrame).CornerRadius = UDim.new(0,THEME.CornerRadius/2); local listStroke = Instance.new("UIStroke", GuiElements.playerListFrame); listStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; listStroke.Color = THEME.Tertiary; listStroke.Thickness = THEME.StrokeThickness; listStroke.Transparency = 0.6; GuiElements.playerListLayout = Instance.new("UIListLayout", GuiElements.playerListFrame); local listLayoutPadding; if currentGuiSizeMode=="Phone" then listLayoutPadding=2 elseif currentGuiSizeMode=="Tablet" then listLayoutPadding=3 else listLayoutPadding=3.5 end; GuiElements.playerListLayout.Padding = UDim.new(0,listLayoutPadding); GuiElements.playerListLayout.SortOrder = Enum.SortOrder.LayoutOrder; GuiElements.playerListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; GuiElements.playerListLayout.FillDirection = Enum.FillDirection.Vertical; local listPadding = Instance.new("UIPadding", GuiElements.playerListFrame); listPadding.PaddingLeft=UDim.new(0,2); listPadding.PaddingRight=UDim.new(0,2); listPadding.PaddingTop=UDim.new(0,2); listPadding.PaddingBottom=UDim.new(0,2); GuiElements.footerFrame = Instance.new("Frame", mainFrame); GuiElements.footerFrame.Size = UDim2.new(1,0,0,0); GuiElements.footerFrame.AutomaticSize = Enum.AutomaticSize.Y; GuiElements.footerFrame.BackgroundTransparency=1; GuiElements.footerFrame.LayoutOrder=100; local footerLayout = Instance.new("UIListLayout",GuiElements.footerFrame); footerLayout.Padding=UDim.new(0,0); footerLayout.SortOrder=Enum.SortOrder.LayoutOrder; footerLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; footerLayout.FillDirection=Enum.FillDirection.Vertical; local disclaimerLabel=Instance.new("TextLabel",GuiElements.footerFrame); disclaimerLabel.Name="DisclaimerLabel"; local disclaimSizeOff; if currentGuiSizeMode=="Phone" then disclaimSizeOff=2 elseif currentGuiSizeMode=="Tablet" then disclaimSizeOff=4 else disclaimSizeOff=5 end; disclaimerLabel.Size=UDim2.new(1,-THEME.Padding*2,0,THEME.DisclaimerSize+disclaimSizeOff); disclaimerLabel.BackgroundTransparency=1; disclaimerLabel.Font=THEME.FontRegular; disclaimerLabel.Text="Module executed via THE MIST HUB."; disclaimerLabel.TextColor3=THEME.TextDisabled; disclaimerLabel.TextSize=THEME.DisclaimerSize; disclaimerLabel.TextWrapped=false; disclaimerLabel.TextXAlignment=Enum.TextXAlignment.Center; disclaimerLabel.LayoutOrder=1; Instance.new("UIPadding",disclaimerLabel).PaddingTop=UDim.new(0,THEME.Padding/2); task.wait(); local currentAbsoluteWidth = mainFrame.AbsoluteSize.X; if currentAbsoluteWidth <= 0 then currentAbsoluteWidth = sizeConstraint.MaxSize.X end; if currentAbsoluteWidth <= 0 then currentAbsoluteWidth = THEME.PanelMaxWidth end; local initialHiddenXOffset = -(currentAbsoluteWidth + 20); mainFrame.Position = UDim2.new(0, initialHiddenXOffset, 0.5, 0); task.delay(0.4, function() if mainFrame and mainFrame.Parent then mainFrame.Visible = true end end); task.spawn(function() while newScreenGui and newScreenGui.Parent and mainFrame and mainFrame.Parent do local animSpeed = 30; local startOffset = Vector2.new(-1,-1); local endOffset = Vector2.new(2,2); bgGradient.Offset = startOffset; local bgTween = TweenService:Create(bgGradient, TweenInfo.new(animSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Offset = endOffset}); bgTween:Play(); bgTween.Completed:Wait(); task.wait(0.1); end end); local panelTween = nil; local slideTweenInfo = TweenInfo.new(0.35, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out); GuiElements.invisibleToggleArea = newScreenGui:FindFirstChild("InvisibleToggleArea_TEMP_FOR_REBUILD"); if GuiElements.invisibleToggleArea then GuiElements.invisibleToggleArea:Destroy() end; GuiElements.invisibleToggleArea = Instance.new("TextButton", newScreenGui); GuiElements.invisibleToggleArea.Name = "InvisibleToggleArea_TEMP_FOR_REBUILD"; local togAreaSize, togAreaPosOff; if currentGuiSizeMode=="Phone" then togAreaSize=60;togAreaPosOff=5 elseif currentGuiSizeMode=="Tablet" then togAreaSize=80;togAreaPosOff=10 else togAreaSize=90;togAreaPosOff=12 end; GuiElements.invisibleToggleArea.Size = UDim2.new(0,togAreaSize,0,togAreaSize); GuiElements.invisibleToggleArea.AnchorPoint = Vector2.new(0,1); GuiElements.invisibleToggleArea.Position = UDim2.new(0,togAreaPosOff,1,-togAreaPosOff); GuiElements.invisibleToggleArea.BackgroundTransparency = 1; GuiElements.invisibleToggleArea.Text = ""; GuiElements.invisibleToggleArea.ZIndex = 10; GuiElements.invisibleToggleArea.MouseButton1Click:Connect(function() if not hasUserSelectedGUISize then createOrShowSizePrompt() else panelVisible = not panelVisible; hideTooltip(); if not MainGui or not MainGui.Parent then MainGui = createBeautifulGUI() end; if MainGui and mainFrame and mainFrame.Parent then local targetXOffset; local safeInset = GuiService:GetGuiInset(); local currentAbsoluteWidth_ = mainFrame.AbsoluteSize.X; if currentAbsoluteWidth_ <= 0 then local sc = mainFrame:FindFirstChildOfClass("UISizeConstraint"); currentAbsoluteWidth_ = sc and sc.MaxSize.X or THEME.PanelMaxWidth end; if panelVisible then targetXOffset = safeInset.X + THEME.Padding; mainFrame.Visible = true; else targetXOffset = -(currentAbsoluteWidth_ + 20); end; local targetPosition = UDim2.new(0,targetXOffset,0.5,0); if panelTween and panelTween.PlaybackState == Enum.PlaybackState.Playing then panelTween:Cancel() end; panelTween = TweenService:Create(mainFrame, slideTweenInfo, {Position = targetPosition}); if not panelVisible then panelTween.Completed:Connect(function(state) if state == Enum.TweenStatus.Completed and not panelVisible then mainFrame.Visible = false end end) end; panelTween:Play(); end; updateFOVCircle(); updateAllExcludedLabelsVisibility(); end end); GuiElements.autoTargetButton.MouseButton1Click:Connect(function() isAutoTargetEnabled = not isAutoTargetEnabled; local newStateText = isAutoTargetEnabled and "TARGET: ON" or "TARGET: OFF"; local newTextColor = isAutoTargetEnabled and THEME.Success or THEME.Error; local button = GuiElements.autoTargetButton; button.Text = newStateText; button:SetAttribute("CurrentTextColor", newTextColor); TweenService:Create(button, TextColorTweenInfo, {TextColor3 = newTextColor}):Play(); updateFOVCircle(); end); GuiElements.espButton.MouseButton1Click:Connect(function() if isStealthMode then return end; toggleESP(not isESPEnabled); end); GuiElements.fovChangerButton.MouseButton1Click:Connect(function() if isStealthMode then return end; isFOVChangerEnabled = not isFOVChangerEnabled; local newStateText = isFOVChangerEnabled and "FOV: ON" or "FOV: OFF"; local newTextColor = isFOVChangerEnabled and THEME.Success or THEME.Error; local button = GuiElements.fovChangerButton; button.Text = newStateText; button:SetAttribute("CurrentTextColor", newTextColor); TweenService:Create(button, TextColorTweenInfo, {TextColor3 = newTextColor}):Play(); setSliderEnabled(GuiElements.camFovSliderContainer, isFOVChangerEnabled); if isFOVChangerEnabled then Camera.FieldOfView = currentCameraFOV; setSliderValue(GuiElements.camFovSliderContainer, currentCameraFOV); else Camera.FieldOfView = gameDefaultFOV; setSliderValue(GuiElements.camFovSliderContainer, gameDefaultFOV); end; updateFOVCircle(); end); GuiElements.resetFovButton.MouseButton1Click:Connect(function() if isStealthMode then return end; currentCameraFOV = gameDefaultFOV; Camera.FieldOfView = gameDefaultFOV; setSliderValue(GuiElements.camFovSliderContainer, gameDefaultFOV); updateFOVCircle(); local button = GuiElements.resetFovButton; local originalTextColor = THEME.ButtonText; button:SetAttribute("CurrentTextColor", THEME.Accent); TweenService:Create(button, TextColorTweenInfo, {TextColor3 = THEME.Accent}):Play(); task.delay(THEME.TextColorFadeDuration * 1.1, function() if button and button.Parent then button:SetAttribute("CurrentTextColor", originalTextColor); TweenService:Create(button, TextColorTweenInfo, {TextColor3 = originalTextColor}):Play() end end) end); local lastUpdate = 0; local updateInterval = 0.5; if GuiElements.HeartbeatConnection then GuiElements.HeartbeatConnection:Disconnect() end; GuiElements.HeartbeatConnection = RunService.Heartbeat:Connect(function() local currentTime = tick(); if panelVisible and mainFrame and mainFrame.Parent and mainFrame.Position.X.Offset > -(mainFrame.AbsoluteSize.X + 10) and (currentTime - lastUpdate >= updateInterval) then pcall(updatePlayerListGUI); lastUpdate = currentTime end end); local initialAutoTargetTextColor_ = isAutoTargetEnabled and THEME.Success or THEME.Error; GuiElements.autoTargetButton.TextColor3 = initialAutoTargetTextColor_; GuiElements.autoTargetButton:SetAttribute("CurrentTextColor", initialAutoTargetTextColor_); local initialEspTextColor_ = isESPEnabled and THEME.Success or THEME.Error; GuiElements.espButton.TextColor3 = initialEspTextColor_; GuiElements.espButton:SetAttribute("CurrentTextColor", initialEspTextColor_); local initialFovTextColor_ = isFOVChangerEnabled and THEME.Success or THEME.Error; GuiElements.fovChangerButton.TextColor3 = initialFovTextColor_; GuiElements.fovChangerButton:SetAttribute("CurrentTextColor", initialFovTextColor_); GuiElements.resetFovButton.TextColor3 = THEME.ButtonText; GuiElements.resetFovButton:SetAttribute("CurrentTextColor", THEME.ButtonText); setSliderEnabled(GuiElements.camFovSliderContainer, not isStealthMode and isFOVChangerEnabled); setSliderValue(GuiElements.camFovSliderContainer, isFOVChangerEnabled and currentCameraFOV or gameDefaultFOV); setSliderValue(GuiElements.targetFovSliderContainer, targetingFOV); return newScreenGui end

local success_init, err_init
success_init, err_init = pcall(function()
	fovCircle = createDrawingCircle();
	Camera.FieldOfView = isFOVChangerEnabled and currentCameraFOV or gameDefaultFOV;
	toggleESP(isESPEnabled);
	updateFOVCircle();
	updateAllExcludedLabelsVisibility();
    setupToolListener(findTool())
	local tapRaycastParams = RaycastParams.new(); tapRaycastParams.FilterType = Enum.RaycastFilterType.Blacklist; tapRaycastParams.IgnoreWater = true;
	local function handleTapExclude(input, gameProcessedEvent) if gameProcessedEvent then return end; if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then local unitRay = Camera:ScreenPointToRay(input.Position.X, input.Position.Y); tapRaycastParams.FilterDescendantsInstances = {character, Storage, MainGui, SizePromptGui}; local rayResult = workspace:Raycast(unitRay.Origin, unitRay.Direction * 500, tapRaycastParams); if rayResult and rayResult.Instance then local hitPart = rayResult.Instance; local hitCharacter = hitPart:FindFirstAncestorWhichIsA("Model"); if hitCharacter and hitCharacter:FindFirstChildOfClass("Humanoid") then local targetPlayer_ = Players:GetPlayerFromCharacter(hitCharacter); if targetPlayer_ and targetPlayer_ ~= player then excludedPlayers[targetPlayer_] = not excludedPlayers[targetPlayer_]; updateExcludedLabel(targetPlayer_); if isESPEnabled then local h = Storage:FindFirstChild(targetPlayer_.Name); if h and h:IsA("Highlight") then local originalColor = h.FillColor; local feedbackColor = excludedPlayers[targetPlayer_] and THEME.Error or THEME.Success; h.FillColor = feedbackColor; h.FillTransparency = 0.3; task.delay(0.3, function() if h and h.Parent then h.FillColor = originalColor; h.FillTransparency = 0.5; end end) end end; end end end end end; UserInputService.InputBegan:Connect(handleTapExclude);
    local function setupPlayerListeners(p_listener) if p_listener == player then return end; task.spawn(function() task.wait(0.1); if not p_listener or not p_listener.Parent then return end; if excludedPlayers[p_listener] then updateExcludedLabel(p_listener) end; if isESPEnabled then applyHighlight(p_listener) end; p_listener.CharacterAdded:Connect(function(newChar_listener) task.wait(0.1); if not p_listener or not p_listener.Parent then return end; if excludedPlayers[p_listener] then updateExcludedLabel(p_listener) end; if isESPEnabled then applyHighlight(p_listener) end end); p_listener.CharacterRemoving:Connect(function(oldChar_listener) local head_listener = oldChar_listener and oldChar_listener:FindFirstChild("Head"); local existingLabel_listener = head_listener and head_listener:FindFirstChild("ExcludeLabel"); if existingLabel_listener then existingLabel_listener:Destroy() end; local h_listener = Storage:FindFirstChild(p_listener.Name); if h_listener then h_listener.Adornee = nil end end) end) end; Players.PlayerAdded:Connect(function(newPlayer) if newPlayer ~= player then setupPlayerListeners(newPlayer) end end); Players.PlayerRemoving:Connect(function(leavingPlayer) excludedPlayers[leavingPlayer] = nil; removeHighlight(leavingPlayer); end); for _, existingPlayer in pairs(Players:GetPlayers()) do setupPlayerListeners(existingPlayer) end;
    player.CharacterAdded:Connect(function(newCharacter) character = newCharacter; task.wait(0.2); backpack = player:FindFirstChild("Backpack") or player:WaitForChild("Backpack", 5); setupToolListener(findTool()); for targetPlayer__, isExcluded_ in pairs(excludedPlayers) do if isExcluded_ then updateExcludedLabel(targetPlayer__) end end; newCharacter.ChildAdded:Connect(function(child) if child:IsA("Tool") then setupToolListener(child) end end); newCharacter.ChildRemoved:Connect(function(child) if child == currentTool then setupToolListener(nil) end end) end)
    if character then character.ChildAdded:Connect(function(child) if child:IsA("Tool") then setupToolListener(child) end end); character.ChildRemoved:Connect(function(child) if child == currentTool then setupToolListener(nil) end end) end
    player.ChildAdded:Connect(function(child) if child.Name == "Backpack" and child:IsA("Backpack") then backpack = child end end);
	RunService.RenderStepped:Connect(function() if not character or not character.Parent then character = player.Character; if not character then return end end; local currentlyEquippedTool = nil; if character then currentlyEquippedTool = character:FindFirstChildOfClass("Tool") end; if currentlyEquippedTool ~= currentTool then setupToolListener(currentlyEquippedTool) end; if currentTool and not currentTool.Enabled and currentEffectiveCooldown > 0 then if tick() - lastShotTime >= currentEffectiveCooldown then pcall(function() currentTool.Enabled = true end); currentEffectiveCooldown = 0 end end; pcall(updateFOVCircle); pcall(shoot) end);
end)

if not success_init then local err_message = "Unknown error during initialization"; if err_init ~= nil then err_message = tostring(err_init) end; warn("THE MIST Triggerbot Module (GUI Size Prompt) failed to initialize:", err_message); local trace = debug.traceback(err_init, 2); warn("Stack trace:\n" .. trace); if MainGui and MainGui.Parent then MainGui:Destroy() end; MainGui=nil; if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy() end; TooltipLabel=nil; if SizePromptGui and SizePromptGui.Parent then SizePromptGui:Destroy() end; SizePromptGui=nil; if Storage and Storage.Parent then Storage:Destroy() end; if fovCircle and fovCircle.Destroy then fovCircle:Destroy(); fovCircle=nil end; if activatedConnection then activatedConnection:Disconnect() end
else
    local invisibleToggleArea = Instance.new("TextButton", playerGui); invisibleToggleArea.Name = "MistGlobalToggleArea"; invisibleToggleArea.Size = UDim2.new(0,80,0,80); invisibleToggleArea.AnchorPoint = Vector2.new(0,1); invisibleToggleArea.Position = UDim2.new(0,10,1,-10); invisibleToggleArea.BackgroundTransparency = 1; invisibleToggleArea.Text = ""; invisibleToggleArea.ZIndex = 100;
    invisibleToggleArea.MouseButton1Click:Connect(function()
        if not hasUserSelectedGUISize then createOrShowSizePrompt()
        else
            panelVisible = not panelVisible; hideTooltip();
            if not MainGui or not MainGui.Parent then MainGui = createBeautifulGUI() end
            if MainGui and mainFrame and mainFrame.Parent then
                 local targetXOffset; local safeInset = GuiService:GetGuiInset(); local currentAbsoluteWidth_ = mainFrame.AbsoluteSize.X; if currentAbsoluteWidth_ <= 0 then local sc = mainFrame:FindFirstChildOfClass("UISizeConstraint"); currentAbsoluteWidth_ = sc and sc.MaxSize.X or THEME.PanelMaxWidth end; if panelVisible then targetXOffset = safeInset.X + THEME.Padding; mainFrame.Visible = true; else targetXOffset = -(currentAbsoluteWidth_ + 20); end; local targetPosition = UDim2.new(0,targetXOffset,0.5,0); local panelTween = TweenService:Create(mainFrame, TweenInfo.new(0.35, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {Position = targetPosition}); if not panelVisible then panelTween.Completed:Connect(function(state) if state == Enum.TweenStatus.Completed and not panelVisible then mainFrame.Visible = false end end) end; panelTween:Play();
            end; updateFOVCircle(); updateAllExcludedLabelsVisibility();
        end
    end)
end

if script and script:IsA("Script") then script.Destroying:Connect(function()
    if currentTool and currentTool.Parent and not currentTool.Enabled then pcall(function() currentTool.Enabled = true end) end
    if activatedConnection then activatedConnection:Disconnect(); activatedConnection = nil end
    if MainGui and MainGui.Parent then MainGui:Destroy(); MainGui = nil end;
    if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy(); TooltipLabel = nil end;
    if SizePromptGui and SizePromptGui.Parent then SizePromptGui:Destroy(); SizePromptGui = nil end;
    if Storage and Storage.Parent then Storage:Destroy() end;
    if fovCircle and fovCircle.Destroy then fovCircle:Destroy(); fovCircle = nil end;
    if GuiElements.HeartbeatConnection then GuiElements.HeartbeatConnection:Disconnect(); GuiElements.HeartbeatConnection = nil; end
    local mainToggle = playerGui:FindFirstChild("MistGlobalToggleArea"); if mainToggle then mainToggle:Destroy() end
end) end
--- END OF MODIFIED SCRIPT v27 (26.1) ---