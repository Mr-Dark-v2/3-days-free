--[[
    THE MIST Triggerbot v27 (26.1) - Initial GUI Size Prompt & Multi-Size Support - Robust Startup
--]]

--- START OF MODIFIED SCRIPT v27 (26.1) ---

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local GuiService = game:GetService("GuiService")
local CoreGui = game:GetService("CoreGui")
local Camera = workspace.CurrentCamera
local gameDefaultFOV = Camera.FieldOfView
local Debris = game:GetService("Debris")
local SoundService = game:GetService("SoundService")

-- Player and Character Setup
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local playerGui = player:WaitForChild("PlayerGui")

print("THE MIST: Script starting (v26.1)...")

if not playerGui then
    warn("THE MIST: playerGui not found! Cannot initialize UI.")
    return -- Stop script if playerGui is not available
end
print("THE MIST: playerGui found.")

-- State Variables
local isAutoTargetEnabled = true; local lastShotTime = 0;
local COOLDOWN = 0.5;
local targetingFOV = 35;
local currentDelayMode = "Blatant"
local shootDelayMilliseconds = (currentDelayMode == "Normal") and 264 or 0
local fovCircle = nil;
local excludedPlayers = {};
local isStealthMode = true
local isESPEnabled = false;
local isFOVChangerEnabled = false;
local currentCameraFOV = gameDefaultFOV;

-- Shared Cooldown & Global Lock Variables
local currentTool = nil
local activatedConnection = nil
local currentEffectiveCooldown = 0

-- GUI Size Mode State
local currentGuiSizeMode = "Phone" -- Default, will be changed by prompt/toggle
local guiInitialSizeModeChosen = false

-- THEME Configurations (Detailed for clarity)
local THEME_BASE = { Background = Color3.fromRGB(18,18,22), BackgroundSlightlyLighter = Color3.fromRGB(24,24,28), BackgroundSubtleVariant = Color3.fromRGB(21,21,25), Primary = Color3.fromRGB(35,35,45), PrimaryLighter = Color3.fromRGB(45,45,55), Secondary = Color3.fromRGB(55,55,65), Tertiary = Color3.fromRGB(75,75,85), Accent = Color3.fromRGB(0,180,180), AccentAlt = Color3.fromRGB(0,140,140), Text = Color3.fromRGB(235,235,245), TextActive = Color3.fromRGB(255,255,255), TextDisabled = Color3.fromRGB(110,110,120), TextPlayerListNormal = Color3.fromRGB(240,240,250), Success = Color3.fromRGB(30,200,130), Error = Color3.fromRGB(250,60,80), ExcludedIconColor = Color3.fromRGB(250,60,80), Tooltip = Color3.fromRGB(8,8,10), ButtonText = Color3.fromRGB(240,240,250), ButtonBackground = Color3.fromRGB(35,35,45), ButtonBackgroundHover = Color3.fromRGB(45,45,55), ButtonOutline = Color3.fromRGB(75,75,85), ButtonOutlineHover = Color3.fromRGB(0,180,180), SliderTrack = Color3.fromRGB(55,55,65), SliderTrackDisabled = Color3.fromRGB(35,35,45), SliderThumbBorder = Color3.fromRGB(18,18,22), SliderThumbBorderDisabled = Color3.fromRGB(35,35,45), ExcludeLabelBg = Color3.fromRGB(50,10,50), ExcludeLabelOutline = Color3.fromRGB(220,220,220), Font = Enum.Font.GothamSemibold, FontTitle = Enum.Font.GothamBold, FontIcon = Enum.Font.SourceSansBold, FontRegular = Enum.Font.Gotham, AnimationSpeed = 0.2, ScaleFactorHover = 1.02, ScaleFactorPress = 0.98, StrokeTransparency = 0.6, StrokeTransparencyHover = 0.4, RefExcludedColor = Color3.fromRGB(255,0,0), RefFOVCircleColor = Color3.fromRGB(128,0,128), TextColorFadeDuration = 0.25 }
local THEME_PHONE_CONFIG = table.clone(THEME_BASE); THEME_PHONE_CONFIG.Name = "Phone"; THEME_PHONE_CONFIG.TextSize = 9; THEME_PHONE_CONFIG.SmallTextSize = 7; THEME_PHONE_CONFIG.TitleSize = 10; THEME_PHONE_CONFIG.IconSize = 10; THEME_PHONE_CONFIG.SubtitleSize = 7; THEME_PHONE_CONFIG.DisclaimerSize = 6; THEME_PHONE_CONFIG.CornerRadius = 4; THEME_PHONE_CONFIG.Padding = 3; THEME_PHONE_CONFIG.ElementHeight = 18; THEME_PHONE_CONFIG.SmallElementHeight = 15; THEME_PHONE_CONFIG.SliderHeight = 2.5; THEME_PHONE_CONFIG.SliderThumbSize = 9; THEME_PHONE_CONFIG.PanelMinWidth = 145; THEME_PHONE_CONFIG.PanelMaxWidth = 210; THEME_PHONE_CONFIG.StrokeThickness = 0.8; THEME_PHONE_CONFIG.ButtonOutlineThickness = 1; THEME_PHONE_CONFIG.GuiModeIcon = "ðŸ“±"; THEME_PHONE_CONFIG.NextGuiModeTooltip = "Switch to iPad View"; THEME_PHONE_CONFIG.PlayerListHeight = 60; THEME_PHONE_CONFIG.ExcludeBillboardSize = UDim2.new(0,65,0,16); THEME_PHONE_CONFIG.ExcludeBillboardStudsOffset = Vector3.new(0,2.0,0); THEME_PHONE_CONFIG.ExcludeBillboardTextSize = 8; THEME_PHONE_CONFIG.TitleBarButtonSize = 16;
local THEME_IPAD_CONFIG = table.clone(THEME_BASE); THEME_IPAD_CONFIG.Name = "iPad"; THEME_IPAD_CONFIG.TextSize = 10; THEME_IPAD_CONFIG.SmallTextSize = 8; THEME_IPAD_CONFIG.TitleSize = 11; THEME_IPAD_CONFIG.IconSize = 12; THEME_IPAD_CONFIG.SubtitleSize = 8; THEME_IPAD_CONFIG.DisclaimerSize = 7; THEME_IPAD_CONFIG.CornerRadius = 5; THEME_IPAD_CONFIG.Padding = 5; THEME_IPAD_CONFIG.ElementHeight = 22; THEME_IPAD_CONFIG.SmallElementHeight = 18; THEME_IPAD_CONFIG.SliderHeight = 3.5; THEME_IPAD_CONFIG.SliderThumbSize = 11; THEME_IPAD_CONFIG.PanelMinWidth = 175; THEME_IPAD_CONFIG.PanelMaxWidth = 260; THEME_IPAD_CONFIG.StrokeThickness = 1; THEME_IPAD_CONFIG.ButtonOutlineThickness = 1.2; THEME_IPAD_CONFIG.GuiModeIcon = "ðŸ“„"; THEME_IPAD_CONFIG.NextGuiModeTooltip = "Switch to PC View"; THEME_IPAD_CONFIG.PlayerListHeight = 80; THEME_IPAD_CONFIG.ExcludeBillboardSize = UDim2.new(0,78,0,20); THEME_IPAD_CONFIG.ExcludeBillboardStudsOffset = Vector3.new(0,2.3,0); THEME_IPAD_CONFIG.ExcludeBillboardTextSize = 10; THEME_IPAD_CONFIG.TitleBarButtonSize = 18;
local THEME_PC_CONFIG = table.clone(THEME_BASE); THEME_PC_CONFIG.Name = "PC"; THEME_PC_CONFIG.TextSize = 11; THEME_PC_CONFIG.SmallTextSize = 9; THEME_PC_CONFIG.TitleSize = 12; THEME_PC_CONFIG.IconSize = 14; THEME_PC_CONFIG.SubtitleSize = 8; THEME_PC_CONFIG.DisclaimerSize = 7; THEME_PC_CONFIG.CornerRadius = 6; THEME_PC_CONFIG.Padding = 6; THEME_PC_CONFIG.ElementHeight = 24; THEME_PC_CONFIG.SmallElementHeight = 20; THEME_PC_CONFIG.SliderHeight = 4; THEME_PC_CONFIG.SliderThumbSize = 12; THEME_PC_CONFIG.PanelMinWidth = 200; THEME_PC_CONFIG.PanelMaxWidth = 310; THEME_PC_CONFIG.StrokeThickness = 1.2; THEME_PC_CONFIG.ButtonOutlineThickness = 1.5; THEME_PC_CONFIG.GuiModeIcon = "ðŸ’»"; THEME_PC_CONFIG.NextGuiModeTooltip = "Switch to Phone View"; THEME_PC_CONFIG.PlayerListHeight = 95; THEME_PC_CONFIG.ExcludeBillboardSize = UDim2.new(0,90,0,22); THEME_PC_CONFIG.ExcludeBillboardStudsOffset = Vector3.new(0,2.5,0); THEME_PC_CONFIG.ExcludeBillboardTextSize = 11; THEME_PC_CONFIG.TitleBarButtonSize = 20;

local THEME = THEME_PHONE_CONFIG -- Initialize with default, will be updated by user choice

-- Forward declare functions
local createBeautifulGUI, updatePlayerListGUI, updateSizeModeIconDisplay, cycleGuiSizeMode, createSizeModeModal, handleInitialPanelToggle
local updateFOVCircle, updateAllExcludedLabelsVisibility, toggleESP, setSliderEnabled, setSliderValue, updateExcludedLabel, setupToolListener, calculateEffectiveCooldown, findTool

local TextColorTweenInfo = TweenInfo.new(THEME.TextColorFadeDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut);
local DimTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.Out);
local SwitchAnimationInfo = TweenInfo.new(0.25, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out)

local BulletRenderer_upvr = nil; pcall(function() local mf = RS:FindFirstChild("Modules") if mf and mf:FindFirstChild("BulletRenderer") then BulletRenderer_upvr = require(mf.BulletRenderer) end end)
local Storage = Instance.new("Folder", CoreGui) Storage.Name = "TheMist_Storage_V26_SizePrompt"
local function cleanupOldStorage() for _, v in ipairs(CoreGui:GetChildren()) do if v:IsA("Folder") and v.Name:match("TheMist_Storage") and v ~= Storage then v:Destroy() end end end; cleanupOldStorage()

local GuiElements = {}
local TooltipLabel = nil
local mainFrame = nil
local MainGui = nil
local panelVisible = false
local sizeModeSelectionScreen = nil
local GuiElements_Modal = {}
local standaloneToggleArea = nil

--[[ CORE LOGIC FUNCTIONS (Mostly Unchanged, ensure they use global THEME if needed) ]]
function calculateEffectiveCooldown(toolInstance) if not toolInstance or not toolInstance:IsA("Tool") then return COOLDOWN end; local gameCooldown = toolInstance:GetAttribute("Cooldown"); return (type(gameCooldown) == "number" and gameCooldown > 0) and gameCooldown or COOLDOWN end
function createDrawingCircle() if not pcall(function() local _ = Drawing.new end) then return nil end local circle = Drawing.new("Circle"); circle.Thickness = 2; circle.Color = THEME.RefFOVCircleColor; circle.Transparency = 0.5; circle.Filled = false; circle.NumSides = 64; circle.Visible = false; return circle end
function updateFOVCircle() if not fovCircle then return end; local shouldBeVisible = isAutoTargetEnabled and (not isStealthMode or panelVisible); fovCircle.Visible = shouldBeVisible; if not shouldBeVisible then return end; local screenSize = Camera.ViewportSize; if not screenSize or screenSize.X == 0 or screenSize.Y == 0 then fovCircle.Visible = false; return end; fovCircle.Position = screenSize / 2; local fovRad = math.rad(targetingFOV / 2); local camFovRad = math.rad(Camera.FieldOfView / 2); if fovRad <= 0 or camFovRad <= 0 or math.tan(camFovRad) == 0 then fovCircle.Visible = false; return end; local radius = (screenSize.Y / 2) * math.tan(fovRad) / math.tan(camFovRad); fovCircle.Radius = math.max(0, radius); end
function updateExcludedLabel(targetPlayer) local char = targetPlayer.Character; if not char or not char:FindFirstChild("Head") then return end; local head = char.Head; local billboard = head:FindFirstChild("ExcludeLabel"); local isExcluded = excludedPlayers[targetPlayer]; if isExcluded then if not billboard then billboard = Instance.new("BillboardGui", head); billboard.Name = "ExcludeLabel"; billboard.Size = THEME.ExcludeBillboardSize; billboard.StudsOffset = THEME.ExcludeBillboardStudsOffset; billboard.AlwaysOnTop = true; billboard.LightInfluence = 0; billboard.ClipsDescendants = true; local textLabel = Instance.new("TextLabel", billboard); textLabel.Size = UDim2.fromScale(1, 1); textLabel.BackgroundColor3 = THEME.ExcludeLabelBg; textLabel.BackgroundTransparency = 0.2; textLabel.Font = THEME.Font; textLabel.Text = "EXCLUDED"; textLabel.TextColor3 = THEME.RefExcludedColor; textLabel.TextSize = THEME.ExcludeBillboardTextSize; textLabel.TextScaled = false; textLabel.TextXAlignment = Enum.TextXAlignment.Center; textLabel.TextYAlignment = Enum.TextYAlignment.Center; local corner = Instance.new("UICorner", textLabel); corner.CornerRadius = UDim.new(0, 3); local stroke = Instance.new("UIStroke", textLabel); stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; stroke.Color = THEME.ExcludeLabelOutline; stroke.Thickness = 1; stroke.Transparency = 0.3; end; billboard.Enabled = (not isStealthMode or panelVisible); else if billboard then billboard:Destroy() end end end
function updateAllExcludedLabelsVisibility() local desiredVisibility = (not isStealthMode or panelVisible); for plr_obj, _ in pairs(excludedPlayers) do if plr_obj and plr_obj.Character and plr_obj.Character:FindFirstChild("Head") then local billboard = plr_obj.Character.Head:FindFirstChild("ExcludeLabel"); if billboard then billboard.Enabled = desiredVisibility end end end end
function applyHighlight(p) if p == player then return end; local existing = Storage:FindFirstChild(p.Name); if existing then existing:Destroy() end; local highlight = Instance.new("Highlight", Storage); highlight.Name = p.Name; highlight.FillColor = p.Team and p.Team.TeamColor.Color or Color3.fromRGB(255,255,255); highlight.FillTransparency = 0.5; highlight.OutlineColor = Color3.fromRGB(255,255,255); highlight.OutlineTransparency = 0; highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop; highlight.Enabled = isESPEnabled; if p.Character then highlight.Adornee = p.Character end; p.CharacterAdded:Connect(function(c) if highlight and highlight.Parent then highlight.Adornee = c end end); p.CharacterRemoving:Connect(function() if highlight and highlight.Parent then highlight.Adornee = nil end end); return highlight end
function removeHighlight(p) if p then local existing = Storage:FindFirstChild(p.Name); if existing then existing:Destroy() end end end
function toggleESP(enabled) if isStealthMode and enabled == true then return end; isESPEnabled = enabled; if enabled then for _, p_ in pairs(Players:GetPlayers()) do if p_ ~= player then local h = Storage:FindFirstChild(p_.Name); if h then h.Enabled = true else applyHighlight(p_) end end end else for _, hl in pairs(Storage:GetChildren()) do if hl:IsA("Highlight") then hl.Enabled = false end end end; if GuiElements.espButton then local newStateText = isESPEnabled and "ESP: ON" or "ESP: OFF"; local newTextColor = isESPEnabled and THEME.Success or THEME.Error; GuiElements.espButton.Text = newStateText; GuiElements.espButton:SetAttribute("CurrentTextColor", newTextColor); TweenService:Create(GuiElements.espButton, TextColorTweenInfo, { TextColor3 = newTextColor }):Play() end end
function getShootEvent() local remotes = RS:FindFirstChild("Remotes"); return remotes and remotes:FindFirstChild("Shoot") end
function findTool() if character then for _, child in pairs(character:GetChildren()) do if child:IsA("Tool") then return child end end end; if backpack then for _, child in pairs(backpack:GetChildren()) do if child:IsA("Tool") then return child end end end; return nil end
function isVisible(targetCharacter) if not character or not character:FindFirstChild("HumanoidRootPart") then return false end; local startPos = character.HumanoidRootPart.Position; local partsToCheck = {"Head","LeftHand","RightHand","LeftFoot","RightFoot","HumanoidRootPart"}; local raycastParams = RaycastParams.new(); raycastParams.FilterDescendantsInstances = {character,Storage}; raycastParams.FilterType = Enum.RaycastFilterType.Blacklist; raycastParams.IgnoreWater = true; for _, partName in pairs(partsToCheck) do local targetPart = targetCharacter:FindFirstChild(partName); if targetPart then local targetPos = targetPart.Position; local direction = targetPos - startPos; local distance = direction.Magnitude; if distance < 0.1 then continue end; local rayResult = workspace:Raycast(startPos, direction.Unit * distance, raycastParams); if not rayResult or rayResult.Instance:IsDescendantOf(targetCharacter) then return true end end end; return false end
function isWithinFOV(targetPart) if not character or not character:FindFirstChild("HumanoidRootPart") then return false end; local cameraCFrame = Camera.CFrame; local targetPos = targetPart.Position; local cameraPos = cameraCFrame.Position; if (targetPos - cameraPos).Magnitude < 0.1 then return true end; local directionToTarget = (targetPos - cameraPos).Unit; local cameraLook = cameraCFrame.LookVector; local dot = math.clamp(directionToTarget:Dot(cameraLook), -1, 1); local angle = math.deg(math.acos(dot)); return angle <= (targetingFOV / 2) end
function setupToolListener(toolInstance) if activatedConnection then activatedConnection:Disconnect(); activatedConnection = nil end; if currentTool and currentTool ~= toolInstance and not currentTool.Enabled then pcall(function() currentTool.Enabled = true end) end; currentTool = toolInstance; if toolInstance and toolInstance:IsA("Tool") then local cooldownActive = currentEffectiveCooldown > 0 and (tick() - lastShotTime < currentEffectiveCooldown); pcall(function() toolInstance.Enabled = not cooldownActive end); activatedConnection = toolInstance.Activated:Connect(function() lastShotTime = tick(); currentEffectiveCooldown = calculateEffectiveCooldown(toolInstance); if toolInstance then pcall(function() toolInstance.Enabled = false end) end end) else currentEffectiveCooldown = 0 end end
function findClosestEnemy() local maxDistance = 400; local closestEnemy = nil; local closestDistance = maxDistance; local playerRootPart = character and character:FindFirstChild("HumanoidRootPart"); if not playerRootPart then return nil end; local playerRootPos = playerRootPart.Position; local myTeam = player.Team; if not myTeam then return nil end; for _, targetPlayer in pairs(Players:GetPlayers()) do if targetPlayer ~= player and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and targetPlayer.Character:FindFirstChildOfClass("Humanoid") then local targetChar = targetPlayer.Character; local targetRoot = targetChar.HumanoidRootPart; local targetHumanoid = targetChar:FindFirstChildOfClass("Humanoid"); local targetTeam = targetPlayer.Team; local isActualOpponent = false; if targetTeam then if myTeam.Name == "Team1" and targetTeam.Name == "Team2" then isActualOpponent = true elseif myTeam.Name == "Team2" and targetTeam.Name == "Team1" then isActualOpponent = true end end; if targetHumanoid.Health > 0 and not excludedPlayers[targetPlayer] and isActualOpponent then local distance = (playerRootPos - targetRoot.Position).Magnitude; if distance < closestDistance then if isVisible(targetChar) and isWithinFOV(targetRoot) then closestDistance = distance; closestEnemy = targetPlayer; end end end end end; return closestEnemy end
function shoot() if not isAutoTargetEnabled then return end; if not character or not character.Parent then return end; if not character:FindFirstChild("HumanoidRootPart") then return end; local tool = currentTool; if not tool or tool.Parent ~= character then tool = findTool(); if tool and tool.Parent == character then setupToolListener(tool) else return end end; local shootEvent = getShootEvent(); if not shootEvent then return end; local effectiveCooldown = calculateEffectiveCooldown(tool); local currentTime = tick(); if currentTime - lastShotTime < effectiveCooldown then return end; local targetEnemy = findClosestEnemy(); if targetEnemy and targetEnemy.Character and targetEnemy.Character:FindFirstChild("HumanoidRootPart") then lastShotTime = currentTime; currentEffectiveCooldown = effectiveCooldown; local toolAtDecision = tool; local targetPartAtDecision = targetEnemy.Character.HumanoidRootPart; local fireSoundAtDecision = tool:FindFirstChild("Fire"); local bulletTypeAtDecision = tool:GetAttribute("BulletType"); local startPosAtDecision; local muzzleAttach = tool:FindFirstChild("Muzzle", true); if muzzleAttach and muzzleAttach:IsA("Attachment") then startPosAtDecision = muzzleAttach.WorldPosition else local handle = tool:FindFirstChild("Handle"); startPosAtDecision = (handle and handle:IsA("BasePart") and handle.Position) or character.HumanoidRootPart.Position end; task.spawn(function() if shootDelayMilliseconds > 0 then task.wait(shootDelayMilliseconds / 1000) end; if not toolAtDecision or toolAtDecision.Parent ~= character then return end; if not character or not character.Parent then return end; if not targetEnemy or not targetEnemy.Parent or not targetEnemy.Character or not targetEnemy.Character.Parent then return end; local targetHumanoid = targetEnemy.Character:FindFirstChildOfClass("Humanoid"); local targetRootPart = targetEnemy.Character:FindFirstChild("HumanoidRootPart"); if not targetHumanoid or not targetRootPart or targetHumanoid.Health <= 0 or excludedPlayers[targetEnemy] then return end; local currentTargetPos = targetRootPart.Position; local currentTargetPart = targetRootPart; local successFire, _ = pcall(function() shootEvent:FireServer(character.HumanoidRootPart.Position, currentTargetPos, currentTargetPart, currentTargetPos) end); if successFire then if fireSoundAtDecision and fireSoundAtDecision:IsA("Sound") then pcall(function() fireSoundAtDecision:Play() end) end; if BulletRenderer_upvr and muzzleAttach then pcall(BulletRenderer_upvr, startPosAtDecision, currentTargetPos, bulletTypeAtDecision) end; pcall(function() toolAtDecision:Activate() end); task.wait(); if toolAtDecision and toolAtDecision.Parent == character then pcall(function() toolAtDecision.Enabled = false end) end end end) end end

--[[ GUI UTILITY FUNCTIONS (Theme-aware) ]]
function getTooltipLabel(parent) if TooltipLabel and TooltipLabel.Parent then return TooltipLabel end; TooltipLabel = Instance.new("Frame", parent); TooltipLabel.Name = "TooltipFrame"; local ttWidth, ttHeight = THEME.PanelMaxWidth*0.45, THEME.ElementHeight*0.9; TooltipLabel.Size = UDim2.new(0, ttWidth, 0, ttHeight); TooltipLabel.BackgroundColor3 = THEME.Tooltip; TooltipLabel.BackgroundTransparency = 0.05; TooltipLabel.BorderSizePixel = 0; TooltipLabel.Position = UDim2.new(0,0,0,0); TooltipLabel.ZIndex = 10001; TooltipLabel.Visible = false; TooltipLabel.ClipsDescendants = true; Instance.new("UICorner", TooltipLabel).CornerRadius = UDim.new(0,3); local p = Instance.new("UIPadding", TooltipLabel); local padVal = THEME.Padding*0.6; local padTopVal = THEME.Padding*0.4; p.PaddingLeft=UDim.new(0,padVal); p.PaddingRight=UDim.new(0,padVal); p.PaddingTop=UDim.new(0,padTopVal); p.PaddingBottom=UDim.new(0,padTopVal); local t = Instance.new("TextLabel", TooltipLabel); t.Name="TooltipText"; t.Size=UDim2.fromScale(1,1); t.BackgroundTransparency=1; t.TextColor3=THEME.TextDisabled; t.Font=THEME.Font; t.TextSize=THEME.SmallTextSize; t.TextXAlignment=Enum.TextXAlignment.Center; t.TextYAlignment=Enum.TextYAlignment.Center; t.Text="Tooltip"; t.ZIndex=10002; t.RichText=true; Instance.new("UITextSizeConstraint",t).MaxTextSize=THEME.SmallTextSize; local function uS() task.wait(); if not t or not t.Parent then return end; local bX, bY = THEME.Padding*1.2, THEME.Padding*0.8; TooltipLabel.Size=UDim2.new(0,t.TextBounds.X + bX,0,t.TextBounds.Y + bY) end; t:GetPropertyChangedSignal("Text"):Connect(uS); uS(); return TooltipLabel end
function showTooltip(guiObject, text) if not TooltipLabel or not TooltipLabel.Parent then return end local textLabel = TooltipLabel:FindFirstChild("TooltipText"); if not textLabel then return end; textLabel.Text = text; local mousePos = UserInputService:GetMouseLocation(); local guiInset = GuiService:GetGuiInset(); local offsetX, offsetY = THEME.Padding*2, THEME.Padding*1.5; TooltipLabel.Position = UDim2.new(0, mousePos.X + offsetX, 0, mousePos.Y - guiInset.Y + offsetY); task.wait(); local viewportSize = Camera.ViewportSize; local absSize = TooltipLabel.AbsoluteSize; local currentPosX, currentPosY = TooltipLabel.Position.X.Offset, TooltipLabel.Position.Y.Offset; if currentPosX + absSize.X > viewportSize.X then currentPosX = mousePos.X - absSize.X - offsetX end; if currentPosY + absSize.Y > viewportSize.Y - guiInset.Y then currentPosY = mousePos.Y - absSize.Y - offsetY - guiInset.Y end; TooltipLabel.Position = UDim2.new(0, currentPosX, 0, currentPosY); TooltipLabel.Visible = true end
function hideTooltip() if TooltipLabel then TooltipLabel.Visible = false end end
function createStyledButton(parent, initialText, initialTextColor, position, size, tooltipText) local button = Instance.new("TextButton", parent); button.Size = size; button.Position = position; button.BackgroundColor3 = THEME.ButtonBackground; button.Font = THEME.Font; button.Text = initialText; button.TextColor3 = initialTextColor; button.TextSize = THEME.TextSize; button.AutoButtonColor = false; button.ClipsDescendants = true; Instance.new("UICorner", button).CornerRadius = UDim.new(0, THEME.CornerRadius); local stroke = Instance.new("UIStroke", button); stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; stroke.Color = THEME.ButtonOutline; stroke.Thickness = THEME.ButtonOutlineThickness; stroke.Transparency = THEME.StrokeTransparency; local uiScale = Instance.new("UIScale", button); uiScale.Scale = 1; button:SetAttribute("Hovering", false); button:SetAttribute("Tooltip", tooltipText or ""); button:SetAttribute("CurrentTextColor", initialTextColor); local hoverTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.Out); local pressTweenInfo = TweenInfo.new(THEME.AnimationSpeed * 0.6, Enum.EasingStyle.Sine, Enum.EasingDirection.Out); local scaleTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Back, Enum.EasingDirection.Out); button.MouseEnter:Connect(function() button:SetAttribute("Hovering", true); TweenService:Create(stroke, hoverTweenInfo, { Color = THEME.ButtonOutlineHover }):Play(); TweenService:Create(button, hoverTweenInfo, { BackgroundColor3 = THEME.ButtonBackgroundHover }):Play(); TweenService:Create(uiScale, scaleTweenInfo, { Scale = THEME.ScaleFactorHover }):Play(); if button:GetAttribute("Tooltip") ~= "" then showTooltip(button, button:GetAttribute("Tooltip")) end end); button.MouseLeave:Connect(function() button:SetAttribute("Hovering", false); TweenService:Create(stroke, hoverTweenInfo, { Color = THEME.ButtonOutline }):Play(); TweenService:Create(button, hoverTweenInfo, { BackgroundColor3 = THEME.ButtonBackground }):Play(); TweenService:Create(uiScale, scaleTweenInfo, { Scale = 1 }):Play(); hideTooltip() end); button.MouseButton1Down:Connect(function() TweenService:Create(uiScale, pressTweenInfo, { Scale = THEME.ScaleFactorPress }):Play(); hideTooltip() end); button.MouseButton1Up:Connect(function() local targetScale = button:GetAttribute("Hovering") and THEME.ScaleFactorHover or 1; local targetBgColor = button:GetAttribute("Hovering") and THEME.ButtonBackgroundHover or THEME.ButtonBackground; local targetOutlineColor = button:GetAttribute("Hovering") and THEME.ButtonOutlineHover or THEME.ButtonOutline; TweenService:Create(uiScale, scaleTweenInfo, { Scale = targetScale }):Play(); TweenService:Create(button, hoverTweenInfo, { BackgroundColor3 = targetBgColor }):Play(); TweenService:Create(stroke, hoverTweenInfo, { Color = targetOutlineColor }):Play(); if button:GetAttribute("Hovering") and button:GetAttribute("Tooltip") ~= "" then showTooltip(button, button:GetAttribute("Tooltip")) end end); return button end
function updateSliderStyle(sliderContainer, value, isEnabled) if not sliderContainer or not sliderContainer:IsA("Frame") then return end local valueLabel = sliderContainer:FindFirstChild("ValueLabel") local sliderTrack = sliderContainer:FindFirstChild("SliderTrack") if not valueLabel or not sliderTrack then return end local sliderFill = sliderTrack:FindFirstChild("SliderFill") local sliderThumb = sliderTrack:FindFirstChild("SliderThumb") if not sliderFill or not sliderThumb then return end local minValue = sliderContainer:GetAttribute("MinValue") or 0 local maxValue = sliderContainer:GetAttribute("MaxValue") or 100 local range = maxValue - minValue if range <= 0 then range = 1 end local percentage = math.clamp((value - minValue) / range, 0, 1) sliderThumb.Position = UDim2.new(percentage, 0, 0.5, 0) sliderFill.Size = UDim2.new(percentage, 0, 1, 0) valueLabel.Text = tostring(math.floor(value)) local thumbColor = isEnabled and THEME.AccentAlt or THEME.Tertiary local fillColor = isEnabled and THEME.Accent or THEME.Tertiary local valueColor = isEnabled and THEME.Text or THEME.TextDisabled local trackColor = isEnabled and THEME.SliderTrack or THEME.SliderTrackDisabled local thumbBorderColor = isEnabled and THEME.SliderThumbBorder or THEME.SliderThumbBorderDisabled sliderThumb.BackgroundColor3 = thumbColor sliderFill.BackgroundColor3 = fillColor valueLabel.TextColor3 = valueColor sliderTrack.BackgroundColor3 = trackColor sliderThumb.BorderColor3 = thumbBorderColor end
function setSliderEnabled(sliderContainer, enabled) if not sliderContainer or not sliderContainer:IsA("Frame") then return end sliderContainer:SetAttribute("Enabled", enabled) local valueLabel = sliderContainer:FindFirstChild("ValueLabel") local currentVal = tonumber(valueLabel and valueLabel.Text or sliderContainer:GetAttribute("InitialValue") or 0) updateSliderStyle(sliderContainer, currentVal, enabled) end
function setSliderValue(sliderContainer, value) if not sliderContainer or not sliderContainer:IsA("Frame") then return end local minValue = sliderContainer:GetAttribute("MinValue") or 0 local maxValue = sliderContainer:GetAttribute("MaxValue") or 100 local clampedValue = math.clamp(value, minValue, maxValue) local isEnabled = sliderContainer:GetAttribute("Enabled") updateSliderStyle(sliderContainer, clampedValue, isEnabled); end
function createSlider(parent, labelText, minValue, maxValue, initialValue, valueChangedCallback, tooltipText) local container = Instance.new("Frame"); local contHeightMultiplier = ({Phone=1.35, iPad=1.4, PC=1.5})[THEME.Name] or 1.5; container.Size = UDim2.new(1, 0, 0, THEME.ElementHeight * contHeightMultiplier); container.BackgroundTransparency = 1; container.Parent = parent; container:SetAttribute("Tooltip", tooltipText or ""); container:SetAttribute("Enabled", true); container:SetAttribute("MinValue", minValue); container:SetAttribute("MaxValue", maxValue); container:SetAttribute("InitialValue", initialValue); local label = Instance.new("TextLabel", container); label.Size = UDim2.new(0.7, -(THEME.Padding), 0, THEME.SmallElementHeight); label.Position = UDim2.new(0,0,0,0); label.BackgroundTransparency=1; label.TextColor3=THEME.TextDisabled; label.Font=THEME.Font; label.TextSize=THEME.SmallTextSize; label.Text=labelText; label.TextXAlignment=Enum.TextXAlignment.Left; local valueLabel=Instance.new("TextLabel",container); valueLabel.Name="ValueLabel"; valueLabel.Size=UDim2.new(0.3,0,0,THEME.SmallElementHeight); valueLabel.Position=UDim2.new(0.7,0,0,0); valueLabel.BackgroundTransparency=1; valueLabel.TextColor3=THEME.Text; valueLabel.Font=THEME.Font; valueLabel.TextSize=THEME.SmallTextSize; valueLabel.Text=tostring(math.floor(initialValue)); valueLabel.TextXAlignment=Enum.TextXAlignment.Right; local sliderTrack=Instance.new("Frame",container); sliderTrack.Name="SliderTrack"; local trackHAddition = ({Phone=2, iPad=3, PC=4})[THEME.Name] or 4; local trackPosPadding = ({Phone=THEME.Padding*0.4, iPad=THEME.Padding*0.6, PC=THEME.Padding*0.8})[THEME.Name] or THEME.Padding*0.8; sliderTrack.Size=UDim2.new(1,0,0,THEME.SliderHeight + trackHAddition); sliderTrack.Position=UDim2.new(0,0,1,-(THEME.SliderHeight+trackHAddition)-trackPosPadding); sliderTrack.BackgroundColor3=THEME.SliderTrack; Instance.new("UICorner",sliderTrack).CornerRadius=UDim.new(0,(THEME.SliderHeight+trackHAddition)/2); local trackStroke=Instance.new("UIStroke",sliderTrack); trackStroke.ApplyStrokeMode=Enum.ApplyStrokeMode.Border; trackStroke.Color=THEME.Tertiary; trackStroke.Thickness=({Phone=0.5, iPad=0.7, PC=1})[THEME.Name] or 1; trackStroke.Transparency=0.7; local sliderFill=Instance.new("Frame",sliderTrack); sliderFill.Name="SliderFill"; sliderFill.Size=UDim2.new(0,0,1,0); sliderFill.BackgroundColor3=THEME.Accent; sliderFill.BorderSizePixel=0; Instance.new("UICorner",sliderFill).CornerRadius=UDim.new(0,(THEME.SliderHeight+trackHAddition)/2); local sliderThumb=Instance.new("Frame",sliderTrack); sliderThumb.Name="SliderThumb"; local thumbActualSize=THEME.SliderThumbSize; sliderThumb.Size=UDim2.fromOffset(thumbActualSize,thumbActualSize); sliderThumb.AnchorPoint=Vector2.new(0.5,0.5); sliderThumb.Position=UDim2.new(0,0,0.5,0); sliderThumb.BackgroundColor3=THEME.AccentAlt; sliderThumb.BorderSizePixel=({Phone=1, iPad=1.2, PC=1.5})[THEME.Name] or 1.5; sliderThumb.BorderColor3=THEME.SliderThumbBorder; Instance.new("UICorner",sliderThumb).CornerRadius=UDim.new(0.5,0); local thumbScale=Instance.new("UIScale",sliderThumb); thumbScale.Scale=1; local dragging=false; local inputChangedConn,inputEndedConn=nil,nil; local thumbTweenInfo=TweenInfo.new(0.15,Enum.EasingStyle.Back,Enum.EasingDirection.Out); local function updateSlider(inputPos) if not container:GetAttribute("Enabled") then return end local relativePos=sliderTrack.AbsolutePosition; local trackSize=sliderTrack.AbsoluteSize; if trackSize.X<=0 then return end local thumbRadius=sliderThumb.AbsoluteSize.X/2; local usableWidth=trackSize.X-(thumbRadius*2); if usableWidth<=0 then usableWidth=1 end local rawX=inputPos.X-relativePos.X-thumbRadius; local percentage=math.clamp(rawX/usableWidth,0,1); local value=minValue+(maxValue-minValue)*percentage; local newValue=math.floor(value); updateSliderStyle(container,newValue,true); if valueChangedCallback then valueChangedCallback(newValue) end end; updateSliderStyle(container,initialValue,true); local function onInputBegan(input) if not container:GetAttribute("Enabled") then return end; if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then dragging=true; TweenService:Create(thumbScale,thumbTweenInfo,{Scale=1.1}):Play(); updateSlider(input.Position); hideTooltip(); if inputChangedConn then inputChangedConn:Disconnect() end; if inputEndedConn then inputEndedConn:Disconnect() end; inputEndedConn=input.Changed:Connect(function() if input.UserInputState==Enum.UserInputState.End then dragging=false; TweenService:Create(thumbScale,thumbTweenInfo,{Scale=1}):Play(); if inputChangedConn then inputChangedConn:Disconnect(); inputChangedConn=nil end; if inputEndedConn then inputEndedConn:Disconnect(); inputEndedConn=nil end end end); inputChangedConn=RunService.RenderStepped:Connect(function() if dragging then updateSlider(UserInputService:GetMouseLocation()) else if inputChangedConn then inputChangedConn:Disconnect(); inputChangedConn=nil end end end) end end; sliderTrack.InputBegan:Connect(onInputBegan); sliderThumb.InputBegan:Connect(onInputBegan); container.MouseEnter:Connect(function() if container:GetAttribute("Tooltip")~="" and not dragging then showTooltip(container,container:GetAttribute("Tooltip")) end end); container.MouseLeave:Connect(function() if not dragging then hideTooltip() end end); return container,valueLabel end

-- Moved updatePlayerListGUI to global scope (Content mostly same, ensure THEME usage)
function updatePlayerListGUI() if not GuiElements.playerListFrame or not GuiElements.playerListFrame.Parent then return end; if not character or not character:FindFirstChild("HumanoidRootPart") then return end; local existingButtons = {}; for _, child in ipairs(GuiElements.playerListFrame:GetChildren()) do if child:IsA("TextButton") and child.Name:match("_Entry$") then local userIdAttr = child:GetAttribute("PlayerUserId"); if userIdAttr then existingButtons[userIdAttr] = child end end end; local nearby = {}; local playerRootPos = character.HumanoidRootPart.Position; local displayRange = 50; for _, p_ in pairs(Players:GetPlayers()) do if p_ ~= player and p_.Character and p_.Character:FindFirstChild("HumanoidRootPart") then local targetHumanoid = p_.Character:FindFirstChildOfClass("Humanoid"); if targetHumanoid and targetHumanoid.Health > 0 then local targetRootPos = p_.Character.HumanoidRootPart.Position; local dist = (playerRootPos - targetRootPos).Magnitude; if dist <= displayRange then table.insert(nearby, {Player = p_, Dist = dist}) end end end end; table.sort(nearby, function(a, b) return a.Dist < b.Dist end); local itemPaddingTotal = THEME.Padding * 1.5; local distLabelWidth = ({Phone=20, iPad=25, PC=30})[THEME.Name] or 30; local iconSize = THEME.IconSize; local teamIndicatorWidth = THEME.Padding/2 + ({Phone=1, iPad=1.5, PC=2})[THEME.Name] or 2; local iconSectionWidth = iconSize + THEME.Padding/2 + teamIndicatorWidth + THEME.Padding/2; for i, data in ipairs(nearby) do local p = data.Player; local userId = p.UserId; local btn = existingButtons[userId]; if btn then btn.LayoutOrder = i; local distLabel = btn:FindFirstChild("DistLabel", true); if distLabel then distLabel.Text = math.floor(data.Dist) .. "m" end; local isExcluded = excludedPlayers[p]; local nameLabel = btn:FindFirstChild("NameLabel", true); if nameLabel then nameLabel.TextColor3 = isExcluded and THEME.RefExcludedColor or THEME.TextPlayerListNormal end; local excludeIcon = btn:FindFirstChild("ExcludeIcon", true); if excludeIcon then excludeIcon.Text = isExcluded and "âœ•" or "âœ“"; excludeIcon.TextColor3 = isExcluded and THEME.ExcludedIconColor or THEME.Success; end; updateExcludedLabel(p); existingButtons[userId] = nil else btn = Instance.new("TextButton"); btn.Name = p.Name .. "_Entry"; btn.Size = UDim2.new(1, 0, 0, THEME.SmallElementHeight); btn.BackgroundColor3 = THEME.Primary; btn.BackgroundTransparency = 0.1; btn.Text = ""; btn.LayoutOrder = i; btn:SetAttribute("PlayerUserId", userId); btn.Parent = GuiElements.playerListFrame; Instance.new("UICorner", btn).CornerRadius = UDim.new(0, THEME.CornerRadius / 2); local itemStroke = Instance.new("UIStroke", btn); itemStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; itemStroke.Color = THEME.Tertiary; itemStroke.Thickness = THEME.StrokeThickness * (({Phone=0.8, iPad=0.9, PC=1})[THEME.Name] or 1); itemStroke.Transparency = 0.7; local itemPadding = Instance.new("UIPadding", btn); itemPadding.PaddingLeft = UDim.new(0, THEME.Padding/2); itemPadding.PaddingRight = UDim.new(0, THEME.Padding/2); local excludeIcon = Instance.new("TextLabel", btn); excludeIcon.Name = "ExcludeIcon"; excludeIcon.Size = UDim2.fromOffset(iconSize, iconSize); excludeIcon.Position=UDim2.fromScale(0,0.5); excludeIcon.AnchorPoint=Vector2.new(0,0.5); excludeIcon.BackgroundTransparency = 1; excludeIcon.Font = THEME.FontIcon; local isExcluded = excludedPlayers[p]; excludeIcon.Text = isExcluded and "âœ•" or "âœ“"; excludeIcon.TextColor3 = isExcluded and THEME.ExcludedIconColor or THEME.Success; excludeIcon.TextSize = iconSize; local teamColorIndicator = Instance.new("Frame", btn); teamColorIndicator.Size = UDim2.fromOffset(teamIndicatorWidth, iconSize * 0.8); teamColorIndicator.Position=UDim2.fromOffset(iconSize + THEME.Padding/2,0)+UDim2.fromScale(0,0.5); teamColorIndicator.AnchorPoint=Vector2.new(0,0.5); teamColorIndicator.BackgroundColor3 = p.Team and p.Team.TeamColor.Color or Color3.fromRGB(90,90,90); teamColorIndicator.BorderSizePixel = 0; Instance.new("UICorner", teamColorIndicator).CornerRadius = UDim.new(0, 2); local nameLabel = Instance.new("TextLabel", btn); nameLabel.Name = "NameLabel"; nameLabel.Size = UDim2.new(1, -(iconSectionWidth + distLabelWidth + itemPaddingTotal), 1, 0); nameLabel.Position=UDim2.fromOffset(iconSectionWidth,0); nameLabel.BackgroundTransparency = 1; nameLabel.Font = THEME.FontRegular; nameLabel.Text = p.Name; nameLabel.TextColor3 = isExcluded and THEME.RefExcludedColor or THEME.TextPlayerListNormal; nameLabel.TextSize = THEME.SmallTextSize; nameLabel.TextXAlignment = Enum.TextXAlignment.Left; local distLabel = Instance.new("TextLabel", btn); distLabel.Name = "DistLabel"; distLabel.Size = UDim2.new(0, distLabelWidth, 1, 0); distLabel.AnchorPoint=Vector2.new(1,0.5); distLabel.Position=UDim2.fromScale(1,0.5); distLabel.BackgroundTransparency = 1; distLabel.Font = THEME.FontRegular; distLabel.Text = math.floor(data.Dist) .. "m"; distLabel.TextColor3 = THEME.TextDisabled; distLabel.TextSize = THEME.SmallTextSize; distLabel.TextXAlignment = Enum.TextXAlignment.Right; updateExcludedLabel(p); btn.MouseEnter:Connect(function() TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundTransparency = 0}):Play() end); btn.MouseLeave:Connect(function() TweenService:Create(btn, TweenInfo.new(0.1), {BackgroundTransparency = 0.1}):Play() end); btn.MouseButton1Click:Connect(function() excludedPlayers[p] = not excludedPlayers[p]; updateExcludedLabel(p); local isNowExcluded = excludedPlayers[p]; nameLabel.TextColor3 = isNowExcluded and THEME.RefExcludedColor or THEME.TextPlayerListNormal; excludeIcon.Text = isNowExcluded and "âœ•" or "âœ“"; excludeIcon.TextColor3 = isNowExcluded and THEME.ExcludedIconColor or THEME.Success; end) end end; for _, oldBtn in pairs(existingButtons) do oldBtn:Destroy() end; if GuiElements.playerListFrame and GuiElements.playerListLayout and GuiElements.playerListFrame:IsA("ScrollingFrame") then local itemHeight = THEME.SmallElementHeight; local paddingOffset = GuiElements.playerListLayout.Padding.Offset; local childrenCount = 0; for _, child_obj in ipairs(GuiElements.playerListFrame:GetChildren()) do if child_obj:IsA("TextButton") and child_obj.Name:match("_Entry$") then childrenCount = childrenCount + 1 end end; local totalContentHeight; if childrenCount > 0 then totalContentHeight = childrenCount * (itemHeight + paddingOffset) - paddingOffset; else totalContentHeight = 0; end; GuiElements.playerListFrame.CanvasSize = UDim2.new(0,0,0, math.max(GuiElements.playerListFrame.Size.Y.Offset, totalContentHeight)); end end

--[[ GUI MODE, STEALTH, AND MODAL FUNCTIONS ]]
function updateSizeModeIconDisplay() if GuiElements.sizeModeIconLabel and GuiElements.sizeModeButton then GuiElements.sizeModeIconLabel.Text = THEME.GuiModeIcon; GuiElements.sizeModeButton:SetAttribute("Tooltip", THEME.NextGuiModeTooltip) end end
function cycleGuiSizeMode() local oldPanelVisibleState = panelVisible; if currentGuiSizeMode == "Phone" then currentGuiSizeMode = "iPad"; THEME = THEME_IPAD_CONFIG elseif currentGuiSizeMode == "iPad" then currentGuiSizeMode = "PC"; THEME = THEME_PC_CONFIG else currentGuiSizeMode = "Phone"; THEME = THEME_PHONE_CONFIG end; TextColorTweenInfo = TweenInfo.new(THEME.TextColorFadeDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut); DimTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.Out); if MainGui and MainGui.Parent then MainGui:Destroy(); MainGui = nil end; if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy(); TooltipLabel = nil; end; GuiElements = {}; MainGui = createBeautifulGUI(); panelVisible = oldPanelVisibleState; if mainFrame and mainFrame.Parent then local currentAbsoluteWidth = mainFrame.AbsoluteSize.X; if currentAbsoluteWidth <= 0 then local sizeConstraint = mainFrame:FindFirstChildOfClass("UISizeConstraint"); currentAbsoluteWidth = sizeConstraint and sizeConstraint.MaxSize.X or THEME.PanelMaxWidth end; if panelVisible then local safeInset = GuiService:GetGuiInset(); local targetXOffset = safeInset.X + THEME.Padding; mainFrame.Position = UDim2.new(0, targetXOffset, 0.5, 0); mainFrame.Visible = true else local targetXOffset = -(currentAbsoluteWidth + 20); mainFrame.Position = UDim2.new(0, targetXOffset, 0.5, 0); mainFrame.Visible = false end end; updateFOVCircle(); updateAllExcludedLabelsVisibility(); if panelVisible and GuiElements.playerListFrame then pcall(updatePlayerListGUI) end; updateSizeModeIconDisplay() end
function createSizeModeModal() if sizeModeSelectionScreen and sizeModeSelectionScreen.Parent then return end; sizeModeSelectionScreen = Instance.new("ScreenGui", playerGui); sizeModeSelectionScreen.Name = "MistSizeModeSelectionScreen"; sizeModeSelectionScreen.ResetOnSpawn = false; sizeModeSelectionScreen.ZIndexBehavior = Enum.ZIndexBehavior.Global; sizeModeSelectionScreen.DisplayOrder = 10000; local blurEffectFrame = Instance.new("Frame", sizeModeSelectionScreen); blurEffectFrame.Name = "BlurBackground"; blurEffectFrame.Size = UDim2.fromScale(1,1); blurEffectFrame.BackgroundColor3 = Color3.fromRGB(0,0,0); blurEffectFrame.BackgroundTransparency = 0.3; local blur = Instance.new("UIBlur", blurEffectFrame); blur.Size = 8; local modalFrame = Instance.new("Frame", sizeModeSelectionScreen); modalFrame.Name = "SizeModeModalFrame"; modalFrame.Size = UDim2.new(0, 320, 0, 220); modalFrame.AnchorPoint = Vector2.new(0.5,0.5); modalFrame.Position = UDim2.fromScale(0.5,0.5); modalFrame.BackgroundColor3 = THEME_PHONE_CONFIG.Primary; modalFrame.BorderSizePixel = 0; Instance.new("UICorner", modalFrame).CornerRadius = UDim.new(0,8); local modalPadding = Instance.new("UIPadding", modalFrame); modalPadding.PaddingTop=UDim.new(0,10); modalPadding.PaddingBottom=UDim.new(0,10); modalPadding.PaddingLeft=UDim.new(0,10); modalPadding.PaddingRight=UDim.new(0,10); local modalListLayout = Instance.new("UIListLayout", modalFrame); modalListLayout.Padding = UDim.new(0,10); modalListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center; modalListLayout.SortOrder = Enum.SortOrder.LayoutOrder; local titleLabel = Instance.new("TextLabel", modalFrame); titleLabel.Name = "ModalTitle"; titleLabel.Size = UDim2.new(1,0,0,30); titleLabel.BackgroundTransparency = 1; titleLabel.Font = THEME_PHONE_CONFIG.FontTitle; titleLabel.Text = "Choose Device Size"; titleLabel.TextColor3 = THEME_PHONE_CONFIG.Accent; titleLabel.TextSize = 18; titleLabel.TextXAlignment = Enum.TextXAlignment.Center; titleLabel.LayoutOrder = 1; local function createModalButton(text, sizeModeToSet, order) local baseThemeForButton = THEME_PHONE_CONFIG; local btn = createStyledButton(modalFrame, text, baseThemeForButton.ButtonText, UDim2.new(), UDim2.new(1,-20,0,40), "Select " .. text .. " view"); btn.LayoutOrder = order; btn.Parent = modalFrame; btn.MouseButton1Click:Connect(function() currentGuiSizeMode = sizeModeToSet; if sizeModeToSet == "Phone" then THEME = THEME_PHONE_CONFIG elseif sizeModeToSet == "iPad" then THEME = THEME_IPAD_CONFIG else THEME = THEME_PC_CONFIG end; TextColorTweenInfo = TweenInfo.new(THEME.TextColorFadeDuration, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut); DimTweenInfo = TweenInfo.new(THEME.AnimationSpeed, Enum.EasingStyle.Sine, Enum.EasingDirection.Out); guiInitialSizeModeChosen = true; if sizeModeSelectionScreen and sizeModeSelectionScreen.Parent then sizeModeSelectionScreen:Destroy(); sizeModeSelectionScreen = nil end; GuiElements_Modal = {}; if MainGui and MainGui.Parent then MainGui:Destroy(); MainGui = nil end; if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy(); TooltipLabel = nil end; GuiElements = {}; MainGui = createBeautifulGUI(); panelVisible = true; if mainFrame and mainFrame.Parent then local safeInset = GuiService:GetGuiInset(); local targetXOffset = safeInset.X + THEME.Padding; mainFrame.Position = UDim2.new(0, targetXOffset, 0.5, 0); mainFrame.Visible = true; updateFOVCircle(); updateAllExcludedLabelsVisibility(); if GuiElements.playerListFrame then pcall(updatePlayerListGUI) end; toggleESP(isESPEnabled); updateSizeModeIconDisplay(); end end); return btn end; GuiElements_Modal.PhoneButton = createModalButton("iPhone "..THEME_PHONE_CONFIG.GuiModeIcon, "Phone", 2); GuiElements_Modal.iPadButton = createModalButton("iPad "..THEME_IPAD_CONFIG.GuiModeIcon, "iPad", 3); GuiElements_Modal.PCButton = createModalButton("PC / Laptop "..THEME_PC_CONFIG.GuiModeIcon, "PC", 4); GuiElements_Modal.ModalFrame = modalFrame; end
function handleInitialPanelToggle() hideTooltip(); if not guiInitialSizeModeChosen then createSizeModeModal() else panelVisible = not panelVisible; if not MainGui or not MainGui.Parent or not mainFrame or not mainFrame.Parent then print("THE MIST: Main GUI not found when toggling panel visibility. This shouldn't happen if size was chosen."); return end; local targetXOffset; local safeInset = GuiService:GetGuiInset(); local currentAbsoluteWidth_ = mainFrame.AbsoluteSize.X; if currentAbsoluteWidth_ <= 0 then local sc = mainFrame:FindFirstChildOfClass("UISizeConstraint"); currentAbsoluteWidth_ = sc and sc.MaxSize.X or THEME.PanelMaxWidth end; if panelVisible then targetXOffset = safeInset.X + THEME.Padding; mainFrame.Visible = true else targetXOffset = -(currentAbsoluteWidth_ + 20) end; local targetPosition = UDim2.new(0, targetXOffset, 0.5, 0); local panelTween = GuiElements.panelTween; if panelTween and panelTween.PlaybackState == Enum.PlaybackState.Playing then panelTween:Cancel() end; panelTween = TweenService:Create(mainFrame, TweenInfo.new(0.35, Enum.EasingStyle.Cubic, Enum.EasingDirection.Out), {Position = targetPosition}); if not panelVisible then panelTween.Completed:Connect(function(state) if state == Enum.TweenStatus.Completed and not panelVisible and mainFrame then mainFrame.Visible = false end end) end; panelTween:Play(); GuiElements.panelTween = panelTween; updateFOVCircle(); updateAllExcludedLabelsVisibility() end end
local function toggleStealthMode() isStealthMode = not isStealthMode; local targetTooltip = isStealthMode and "Switch to Normal Mode" or "Switch to Stealth Mode"; local targetStrokeColor = isStealthMode and THEME.Error or THEME.Accent; local targetCoreColor = isStealthMode and THEME.Error or THEME.Accent; local stealthBtnClickArea = GuiElements.stealthModeClickButton; local stealthBtnContainer = GuiElements.stealthModeStroke and GuiElements.stealthModeStroke.Parent; if stealthBtnClickArea then stealthBtnClickArea:SetAttribute("Tooltip", targetTooltip) end; if GuiElements.stealthModeStroke then TweenService:Create(GuiElements.stealthModeStroke, DimTweenInfo, { Color = targetStrokeColor }):Play() end; if GuiElements.stealthModeCore then TweenService:Create(GuiElements.stealthModeCore, DimTweenInfo, { BackgroundColor3 = targetCoreColor }):Play() end; if stealthBtnContainer then local pulseScale = stealthBtnContainer:FindFirstChildWhichIsA("UIScale") or Instance.new("UIScale", stealthBtnContainer); local pressTweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out); local releaseTweenInfo = TweenInfo.new(0.15, Enum.EasingStyle.Back, Enum.EasingDirection.Out); local s1 = TweenService:Create(pulseScale, pressTweenInfo, {Scale = 0.9}); local s2 = TweenService:Create(pulseScale, releaseTweenInfo, {Scale = 1}); s1.Completed:Connect(function() s2:Play() end); s1:Play() end; local targetBgTrans = isStealthMode and 0.5 or 0; local targetTextTrans = isStealthMode and 0.3 or 0; local buttonsToFade = {GuiElements.fovChangerButton, GuiElements.resetFovButton, GuiElements.espButton}; for _, button in ipairs(buttonsToFade) do if button then TweenService:Create(button, DimTweenInfo, {BackgroundTransparency = targetBgTrans}):Play(); TweenService:Create(button, DimTweenInfo, {TextTransparency = targetTextTrans}):Play(); end end; if isStealthMode then isFOVChangerEnabled = false; Camera.FieldOfView = gameDefaultFOV; if GuiElements.fovChangerButton then GuiElements.fovChangerButton.Text = "FOV: OFF"; GuiElements.fovChangerButton.TextColor3 = THEME.Error; GuiElements.fovChangerButton:SetAttribute("CurrentTextColor", THEME.Error); end; if GuiElements.camFovSliderContainer then setSliderEnabled(GuiElements.camFovSliderContainer, false); setSliderValue(GuiElements.camFovSliderContainer, gameDefaultFOV); end; if isESPEnabled then toggleESP(false) end else if GuiElements.fovChangerButton then local initialFovTextColor = isFOVChangerEnabled and THEME.Success or THEME.Error; GuiElements.fovChangerButton.TextColor3 = initialFovTextColor; GuiElements.fovChangerButton:SetAttribute("CurrentTextColor", initialFovTextColor); GuiElements.fovChangerButton.Text = isFOVChangerEnabled and "FOV: ON" or "FOV: OFF"; end; if GuiElements.camFovSliderContainer then setSliderEnabled(GuiElements.camFovSliderContainer, isFOVChangerEnabled); setSliderValue(GuiElements.camFovSliderContainer, isFOVChangerEnabled and currentCameraFOV or gameDefaultFOV); end; if GuiElements.espButton then local initialEspTextColor = isESPEnabled and THEME.Success or THEME.Error; GuiElements.espButton.TextColor3 = initialEspTextColor; GuiElements.espButton:SetAttribute("CurrentTextColor", initialEspTextColor); GuiElements.espButton.Text = isESPEnabled and "ESP: ON" or "ESP: OFF"; end end; updateFOVCircle(); updateAllExcludedLabelsVisibility(); end

--[[ GUI CREATION (Main Function - Called on demand) ]]
function createBeautifulGUI() local guiName = "TheMistGUI_V26_SizePrompt_Main"; local oldMain = playerGui:FindFirstChild(guiName); if oldMain then oldMain:Destroy() end; local newScreenGui = Instance.new("ScreenGui", playerGui); newScreenGui.Name = guiName; newScreenGui.ResetOnSpawn = false; newScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling; newScreenGui.DisplayOrder = 9999; GuiElements = {}; mainFrame = Instance.new("Frame", newScreenGui); mainFrame.Visible = false; mainFrame.AnchorPoint = Vector2.new(0,0.5); mainFrame.Size = UDim2.fromScale(0,0); mainFrame.AutomaticSize = Enum.AutomaticSize.Y; mainFrame.BackgroundColor3 = THEME.Background; mainFrame.BackgroundTransparency = 0; mainFrame.BorderSizePixel = 0; mainFrame.ClipsDescendants = true; mainFrame.ZIndex = 5; mainFrame.Active = true; mainFrame.Draggable = false; Instance.new("UICorner", mainFrame).CornerRadius = UDim.new(0, THEME.CornerRadius); local sizeConstraint = Instance.new("UISizeConstraint", mainFrame); sizeConstraint.MinSize = Vector2.new(THEME.PanelMinWidth, THEME.PanelMinWidth * 0.85); sizeConstraint.MaxSize = Vector2.new(THEME.PanelMaxWidth, math.huge); local bgGradient = Instance.new("UIGradient", mainFrame); bgGradient.Rotation = 135; bgGradient.Color = ColorSequence.new({ColorSequenceKeypoint.new(0,THEME.BackgroundSlightlyLighter),ColorSequenceKeypoint.new(0.3,THEME.Background),ColorSequenceKeypoint.new(0.5,THEME.Primary),ColorSequenceKeypoint.new(0.8,THEME.BackgroundSubtleVariant),ColorSequenceKeypoint.new(1,THEME.BackgroundSlightlyLighter)}); bgGradient.Offset = Vector2.new(-1,-1); local padding = Instance.new("UIPadding", mainFrame); padding.PaddingTop=UDim.new(0,THEME.Padding); padding.PaddingBottom=UDim.new(0,THEME.Padding); padding.PaddingLeft=UDim.new(0,THEME.Padding); padding.PaddingRight=UDim.new(0,THEME.Padding); local listLayout = Instance.new("UIListLayout", mainFrame); listLayout.Padding=UDim.new(0,THEME.Padding); listLayout.SortOrder=Enum.SortOrder.LayoutOrder; listLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; listLayout.FillDirection=Enum.FillDirection.Vertical; getTooltipLabel(newScreenGui); local titleFrame = Instance.new("Frame",mainFrame); titleFrame.Size=UDim2.new(1,0,0,THEME.TitleSize+(THEME.Padding*0.5)); titleFrame.BackgroundTransparency=1; titleFrame.LayoutOrder=0; GuiElements.titleFrame = titleFrame; local stealthButtonSize = THEME.TitleBarButtonSize; GuiElements.stealthModeContainer=Instance.new("Frame",titleFrame); GuiElements.stealthModeContainer.Name="StealthModeContainer"; GuiElements.stealthModeContainer.Size=UDim2.fromOffset(stealthButtonSize,stealthButtonSize); GuiElements.stealthModeContainer.AnchorPoint=Vector2.new(1,0.5); GuiElements.stealthModeContainer.Position=UDim2.new(1,-THEME.Padding/2,0.5,0); GuiElements.stealthModeContainer.BackgroundColor3=THEME.Primary; GuiElements.stealthModeContainer.BackgroundTransparency=0.3; Instance.new("UICorner",GuiElements.stealthModeContainer).CornerRadius=UDim.new(0,THEME.CornerRadius*0.75); GuiElements.stealthModeStroke=Instance.new("UIStroke",GuiElements.stealthModeContainer); GuiElements.stealthModeStroke.ApplyStrokeMode=Enum.ApplyStrokeMode.Border; GuiElements.stealthModeStroke.Color=isStealthMode and THEME.Error or THEME.Accent; GuiElements.stealthModeStroke.Thickness=1; GuiElements.stealthModeStroke.Transparency=0.2; GuiElements.stealthModeCore=Instance.new("Frame",GuiElements.stealthModeContainer); GuiElements.stealthModeCore.Name="Core"; GuiElements.stealthModeCore.Size=UDim2.fromScale(0.5,0.5); GuiElements.stealthModeCore.AnchorPoint=Vector2.new(0.5,0.5); GuiElements.stealthModeCore.Position=UDim2.fromScale(0.5,0.5); GuiElements.stealthModeCore.BackgroundColor3=isStealthMode and THEME.Error or THEME.Accent; GuiElements.stealthModeCore.BackgroundTransparency=0.1; Instance.new("UICorner",GuiElements.stealthModeCore).CornerRadius=UDim.new(0.5,0); GuiElements.stealthModeClickButton=Instance.new("TextButton",GuiElements.stealthModeContainer); GuiElements.stealthModeClickButton.Name="StealthClickArea"; GuiElements.stealthModeClickButton.Size=UDim2.fromScale(1,1); GuiElements.stealthModeClickButton.BackgroundTransparency=1; GuiElements.stealthModeClickButton.Text=""; GuiElements.stealthModeClickButton.ZIndex=2; GuiElements.stealthModeClickButton:SetAttribute("Tooltip",isStealthMode and "Switch to Normal Mode" or "Switch to Stealth Mode"); local scScale=Instance.new("UIScale",GuiElements.stealthModeContainer); scScale.Scale=1; local hvrTweenInfo=TweenInfo.new(0.15,Enum.EasingStyle.Quad,Enum.EasingDirection.Out); GuiElements.stealthModeClickButton.MouseEnter:Connect(function() TS:Create(scScale,hvrTweenInfo,{Scale=1.1}):Play(); local cSC=isStealthMode and THEME.Error or THEME.Accent; TS:Create(GuiElements.stealthModeStroke,hvrTweenInfo,{Color=cSC:Lerp(Color3.new(1,1,1),0.3),Transparency=0}):Play(); if GuiElements.stealthModeClickButton:GetAttribute("Tooltip")~="" then showTooltip(GuiElements.stealthModeClickButton,GuiElements.stealthModeClickButton:GetAttribute("Tooltip")) end end); GuiElements.stealthModeClickButton.MouseLeave:Connect(function() TS:Create(scScale,hvrTweenInfo,{Scale=1}):Play(); local cSC=isStealthMode and THEME.Error or THEME.Accent; TS:Create(GuiElements.stealthModeStroke,hvrTweenInfo,{Color=cSC,Transparency=0.2}):Play(); hideTooltip() end); GuiElements.stealthModeClickButton.MouseButton1Click:Connect(toggleStealthMode); local sizeModeButtonSize = THEME.TitleBarButtonSize; GuiElements.sizeModeButton=Instance.new("TextButton",titleFrame); GuiElements.sizeModeButton.Name="SizeModeButton"; GuiElements.sizeModeButton.Size=UDim2.fromOffset(sizeModeButtonSize,sizeModeButtonSize); GuiElements.sizeModeButton.AnchorPoint=Vector2.new(1,0.5); GuiElements.sizeModeButton.Position=UDim2.new(1,-(THEME.Padding/2+stealthButtonSize+THEME.Padding/2),0.5,0); GuiElements.sizeModeButton.BackgroundColor3=THEME.Primary; GuiElements.sizeModeButton.BackgroundTransparency=0.3; Instance.new("UICorner",GuiElements.sizeModeButton).CornerRadius=UDim.new(0,THEME.CornerRadius*0.75); local smbStroke=Instance.new("UIStroke",GuiElements.sizeModeButton); smbStroke.ApplyStrokeMode=Enum.ApplyStrokeMode.Border; smbStroke.Color=THEME.AccentAlt; smbStroke.Thickness=1; smbStroke.Transparency=0.4; GuiElements.sizeModeButton.Text=""; GuiElements.sizeModeButton.ZIndex=2; GuiElements.sizeModeIconLabel=Instance.new("TextLabel",GuiElements.sizeModeButton); GuiElements.sizeModeIconLabel.Name="IconLabel"; GuiElements.sizeModeIconLabel.Size=UDim2.fromScale(1,1); GuiElements.sizeModeIconLabel.BackgroundTransparency=1; GuiElements.sizeModeIconLabel.Font=THEME.FontIcon; GuiElements.sizeModeIconLabel.TextSize=THEME.IconSize-(({Phone=1, iPad=0, PC=-1})[THEME.Name] or 0); GuiElements.sizeModeIconLabel.TextColor3=THEME.TextActive; GuiElements.sizeModeIconLabel.TextXAlignment=Enum.TextXAlignment.Center; GuiElements.sizeModeIconLabel.TextYAlignment=Enum.TextYAlignment.Center; updateSizeModeIconDisplay(); GuiElements.sizeModeButton.MouseButton1Click:Connect(function() hideTooltip(); cycleGuiSizeMode() end); local smbScale=Instance.new("UIScale",GuiElements.sizeModeButton); smbScale.Scale=1; GuiElements.sizeModeButton.MouseEnter:Connect(function() TS:Create(smbScale,hvrTweenInfo,{Scale=1.1}):Play(); TS:Create(smbStroke,hvrTweenInfo,{Color=THEME.Accent,Transparency=0.1}):Play(); if GuiElements.sizeModeButton:GetAttribute("Tooltip")~="" then showTooltip(GuiElements.sizeModeButton,GuiElements.sizeModeButton:GetAttribute("Tooltip")) end end); GuiElements.sizeModeButton.MouseLeave:Connect(function() TS:Create(smbScale,hvrTweenInfo,{Scale=1}):Play(); TS:Create(smbStroke,hvrTweenInfo,{Color=THEME.AccentAlt,Transparency=0.4}):Play(); hideTooltip() end); local totalButtonsWidth=stealthButtonSize+sizeModeButtonSize+THEME.Padding*1.5; local titleLabel=Instance.new("TextLabel",titleFrame); titleLabel.Size=UDim2.new(1,-totalButtonsWidth,1,0); titleLabel.Position=UDim2.fromOffset(0,0); titleLabel.BackgroundTransparency=1; titleLabel.Text="THE MIST"; titleLabel.TextColor3=THEME.Accent; titleLabel.Font=THEME.FontTitle; titleLabel.TextSize=THEME.TitleSize; titleLabel.TextXAlignment=Enum.TextXAlignment.Left; GuiElements.titleLabel=titleLabel; local subtitleLabel=Instance.new("TextLabel",mainFrame); subtitleLabel.Size=UDim2.new(1,-THEME.Padding*2,0,THEME.SubtitleSize+(({Phone=1,iPad=1.5,PC=2})[THEME.Name] or 2)); subtitleLabel.Position=UDim2.fromOffset(THEME.Padding,0); subtitleLabel.BackgroundTransparency=1; subtitleLabel.Text="triggerbot-module v3.2"; subtitleLabel.TextColor3=THEME.TextDisabled; subtitleLabel.Font=THEME.Font; subtitleLabel.TextSize=THEME.SubtitleSize; subtitleLabel.LayoutOrder=1; subtitleLabel.TextXAlignment=Enum.TextXAlignment.Left; GuiElements.subtitleLabel=subtitleLabel; local mainControlsFrame=Instance.new("Frame",mainFrame); mainControlsFrame.Size=UDim2.new(1,0,0,THEME.ElementHeight*2+THEME.Padding); mainControlsFrame.BackgroundTransparency=1; mainControlsFrame.LayoutOrder=2; local mainControlsLayout=Instance.new("UIListLayout",mainControlsFrame); mainControlsLayout.Padding=UDim.new(0,THEME.Padding); mainControlsLayout.SortOrder=Enum.SortOrder.LayoutOrder; mainControlsLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; local initialAutoTargetTextColor=isAutoTargetEnabled and THEME.Success or THEME.Error; local initialEspTextColor=isESPEnabled and THEME.Success or THEME.Error; GuiElements.autoTargetButton=createStyledButton(mainControlsFrame,"TARGET: OFF",initialAutoTargetTextColor,UDim2.new(),UDim2.new(1,0,0,THEME.ElementHeight),"Toggle Auto Targeting"); GuiElements.espButton=createStyledButton(mainControlsFrame,"ESP: ON",initialEspTextColor,UDim2.new(),UDim2.new(1,0,0,THEME.ElementHeight),"Toggle Player ESP"); GuiElements.autoTargetButton.Text=isAutoTargetEnabled and "TARGET: ON" or "TARGET: OFF"; GuiElements.espButton.Text=isESPEnabled and "ESP: ON" or "ESP: OFF"; GuiElements.espButton.BackgroundTransparency=isStealthMode and 0.5 or 0; GuiElements.espButton.TextTransparency=isStealthMode and 0.3 or 0; GuiElements.mainControlsFrame=mainControlsFrame; local settingsFrame=Instance.new("Frame",mainFrame); settingsFrame.Size=UDim2.new(1,0,0,0); settingsFrame.AutomaticSize=Enum.AutomaticSize.Y; settingsFrame.BackgroundTransparency=1; settingsFrame.LayoutOrder=4; local settingsLayout=Instance.new("UIListLayout",settingsFrame); settingsLayout.Padding=UDim.new(0,THEME.Padding+(({Phone=0,iPad=1,PC=2})[THEME.Name] or 2)); settingsLayout.SortOrder=Enum.SortOrder.LayoutOrder; settingsLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; settingsLayout.FillDirection=Enum.FillDirection.Vertical; GuiElements.settingsFrame=settingsFrame; local targetFovSliderContainer,targetFovValueLabel=createSlider(settingsFrame,"Target FOV",0,180,targetingFOV,function(value) targetingFOV=value; updateFOVCircle() end,"Aim assist Field of View (degrees)"); GuiElements.targetFovSliderContainer=targetFovSliderContainer; GuiElements.targetFovValueLabel=targetFovValueLabel; targetFovSliderContainer.LayoutOrder=1; local delayModeSwitcherFrame=Instance.new("TextButton",settingsFrame); delayModeSwitcherFrame.Name="DelayModeSwitcherFrame"; delayModeSwitcherFrame.Size=UDim2.new(1,0,0,THEME.ElementHeight); delayModeSwitcherFrame.BackgroundTransparency=1; delayModeSwitcherFrame.Text=""; delayModeSwitcherFrame.AutoButtonColor=false; delayModeSwitcherFrame.LayoutOrder=2; delayModeSwitcherFrame:SetAttribute("Tooltip","Click to switch delay mode"); local switchTrack=Instance.new("Frame",delayModeSwitcherFrame); switchTrack.Name="Track"; local trackWOffset=({Phone=-8, iPad=-12, PC=-16})[THEME.Name] or -16; local trackHOffset=({Phone=-1.5, iPad=-2.5, PC=-3.5})[THEME.Name] or -3.5; switchTrack.Size=UDim2.new(1,trackWOffset,1,trackHOffset); switchTrack.AnchorPoint=Vector2.new(0.5,0.5); switchTrack.Position=UDim2.fromScale(0.5,0.5); switchTrack.BackgroundColor3=THEME.PrimaryLighter; switchTrack.BackgroundTransparency=0.5; Instance.new("UICorner",switchTrack).CornerRadius=UDim.new(0,THEME.CornerRadius*0.8); local trackStroke=Instance.new("UIStroke",switchTrack); trackStroke.Color=THEME.Secondary; trackStroke.Transparency=0.6; trackStroke.Thickness=({Phone=0.5, iPad=0.7, PC=1})[THEME.Name] or 1; local switchThumb=Instance.new("Frame",switchTrack); switchThumb.Name="Thumb"; local thumbWOffset=({Phone=-0.8, iPad=-1.2, PC=-1.8})[THEME.Name] or -1.8; local thumbHOffset=({Phone=-1.5, iPad=-2.5, PC=-3.5})[THEME.Name] or -3.5; switchThumb.Size=UDim2.new(0.5,thumbWOffset,1,thumbHOffset); switchThumb.Position=UDim2.fromScale(0,0.5); switchThumb.AnchorPoint=Vector2.new(0,0.5); switchThumb.BackgroundColor3=THEME.Accent; switchThumb.BorderSizePixel=0; Instance.new("UICorner",switchThumb).CornerRadius=UDim.new(0,THEME.CornerRadius*0.7); GuiElements.delaySwitcherThumb=switchThumb; local labelBlatant=Instance.new("TextLabel",switchTrack); labelBlatant.Name="LabelBlatant"; labelBlatant.Size=UDim2.fromScale(0.5,1); labelBlatant.Position=UDim2.fromScale(0,0.5); labelBlatant.AnchorPoint=Vector2.new(0,0.5); labelBlatant.BackgroundTransparency=1; labelBlatant.Font=THEME.Font; labelBlatant.Text="Blatant"; labelBlatant.TextSize=THEME.SmallTextSize; labelBlatant.TextColor3=THEME.TextDisabled; labelBlatant.TextXAlignment=Enum.TextXAlignment.Center; GuiElements.delayLabelBlatant=labelBlatant; local labelNormal=Instance.new("TextLabel",switchTrack); labelNormal.Name="LabelNormal"; labelNormal.Size=UDim2.fromScale(0.5,1); labelNormal.Position=UDim2.fromScale(0.5,0.5); labelNormal.AnchorPoint=Vector2.new(0,0.5); labelNormal.BackgroundTransparency=1; labelNormal.Font=THEME.Font; labelNormal.Text="Normal"; labelNormal.TextSize=THEME.SmallTextSize; labelNormal.TextColor3=THEME.Text; labelNormal.TextXAlignment=Enum.TextXAlignment.Center; GuiElements.delayLabelNormal=labelNormal; local function updateSwitcherVisuals(newMode,skipAnim) local targetThumbPos=(newMode=="Blatant") and UDim2.fromScale(0,0.5) or UDim2.fromScale(0.5,0.5); local blatantColor=(newMode=="Blatant") and THEME.TextActive or THEME.TextDisabled; local normalColor=(newMode=="Normal") and THEME.TextActive or THEME.TextDisabled; if skipAnim then switchThumb.Position=targetThumbPos; labelBlatant.TextColor3=blatantColor; labelNormal.TextColor3=normalColor else TS:Create(switchThumb,SwitchAnimationInfo,{Position=targetThumbPos}):Play(); TS:Create(labelBlatant,TextColorTweenInfo,{TextColor3=blatantColor}):Play(); TS:Create(labelNormal,TextColorTweenInfo,{TextColor3=normalColor}):Play() end end; delayModeSwitcherFrame.MouseButton1Click:Connect(function() hideTooltip(); if currentDelayMode=="Normal" then currentDelayMode="Blatant"; shootDelayMilliseconds=0; updateSwitcherVisuals("Blatant") else currentDelayMode="Normal"; shootDelayMilliseconds=264; updateSwitcherVisuals("Normal") end end); delayModeSwitcherFrame.MouseEnter:Connect(function() if delayModeSwitcherFrame:GetAttribute("Tooltip")~="" then showTooltip(delayModeSwitcherFrame,delayModeSwitcherFrame:GetAttribute("Tooltip")) end end); delayModeSwitcherFrame.MouseLeave:Connect(hideTooltip); updateSwitcherVisuals(currentDelayMode,true); GuiElements.delayModeSwitcherFrame=delayModeSwitcherFrame; local camFovSliderContainer,camFovValueLabel=createSlider(settingsFrame,"Camera FOV",30,120,currentCameraFOV,function(value) if isFOVChangerEnabled then currentCameraFOV=value; Camera.FieldOfView=value; updateFOVCircle() end end,"Camera Field of View (degrees)"); GuiElements.camFovSliderContainer=camFovSliderContainer; GuiElements.camFovValueLabel=camFovValueLabel; camFovSliderContainer.LayoutOrder=3; local fovControlFrame=Instance.new("Frame",settingsFrame); fovControlFrame.Size=UDim2.new(1,0,0,THEME.SmallElementHeight*2+THEME.Padding); fovControlFrame.BackgroundTransparency=1; fovControlFrame.LayoutOrder=4; local fovControlLayout=Instance.new("UIListLayout",fovControlFrame); fovControlLayout.Padding=UDim.new(0,THEME.Padding); fovControlLayout.SortOrder=Enum.SortOrder.LayoutOrder; fovControlLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; local initialFovTextColor=isFOVChangerEnabled and THEME.Success or THEME.Error; GuiElements.fovChangerButton=createStyledButton(fovControlFrame,"FOV: ON",initialFovTextColor,UDim2.new(),UDim2.new(1,0,0,THEME.SmallElementHeight),"Toggle Camera FOV Changer"); GuiElements.resetFovButton=createStyledButton(fovControlFrame,"RESET",THEME.ButtonText,UDim2.new(),UDim2.new(1,0,0,THEME.SmallElementHeight),"Reset Camera FOV to Game Default ("..tostring(math.floor(gameDefaultFOV))..")"); GuiElements.fovChangerButton.TextSize=THEME.SmallTextSize; GuiElements.resetFovButton.TextSize=THEME.SmallTextSize; GuiElements.fovChangerButton.Text=isFOVChangerEnabled and "FOV: ON" or "FOV: OFF"; GuiElements.fovChangerButton.BackgroundTransparency=isStealthMode and 0.5 or 0; GuiElements.fovChangerButton.TextTransparency=isStealthMode and 0.3 or 0; GuiElements.resetFovButton.BackgroundTransparency=isStealthMode and 0.5 or 0; GuiElements.resetFovButton.TextTransparency=isStealthMode and 0.3 or 0; setSliderEnabled(GuiElements.camFovSliderContainer,not isStealthMode and isFOVChangerEnabled); GuiElements.fovControlFrame=fovControlFrame; local listTitle=Instance.new("TextLabel",mainFrame); listTitle.Size=UDim2.new(1,-THEME.Padding*2,0,THEME.SmallElementHeight); listTitle.Position=UDim2.fromOffset(THEME.Padding,0); listTitle.BackgroundTransparency=1; listTitle.Text="NEARBY ENTITIES"; listTitle.TextColor3=THEME.TextDisabled; listTitle.Font=THEME.Font; listTitle.TextSize=THEME.SmallTextSize; listTitle.TextXAlignment=Enum.TextXAlignment.Left; listTitle.LayoutOrder=6; GuiElements.listTitle=listTitle; GuiElements.playerListFrame=Instance.new("ScrollingFrame",mainFrame); GuiElements.playerListFrame.Size=UDim2.new(1,0,0,THEME.PlayerListHeight); GuiElements.playerListFrame.BackgroundTransparency=1; GuiElements.playerListFrame.BackgroundColor3=THEME.BackgroundSlightlyLighter; GuiElements.playerListFrame.BorderSizePixel=0; GuiElements.playerListFrame.LayoutOrder=7; GuiElements.playerListFrame.ScrollBarThickness=({Phone=1.8, iPad=2.2, PC=2.5})[THEME.Name] or 2.5; GuiElements.playerListFrame.ScrollBarImageColor3=THEME.Accent; GuiElements.playerListFrame.CanvasSize=UDim2.new(0,0,0,0); GuiElements.playerListFrame.AutomaticCanvasSize=Enum.AutomaticSize.Y; GuiElements.playerListFrame.ClipsDescendants=true; Instance.new("UICorner",GuiElements.playerListFrame).CornerRadius=UDim.new(0,THEME.CornerRadius/2); local listStroke=Instance.new("UIStroke",GuiElements.playerListFrame); listStroke.ApplyStrokeMode=Enum.ApplyStrokeMode.Border; listStroke.Color=THEME.Tertiary; listStroke.Thickness=THEME.StrokeThickness; listStroke.Transparency=0.6; GuiElements.playerListLayout=Instance.new("UIListLayout",GuiElements.playerListFrame); GuiElements.playerListLayout.Padding=UDim.new(0,({Phone=1.8,iPad=2.5,PC=3})[THEME.Name] or 3); GuiElements.playerListLayout.SortOrder=Enum.SortOrder.LayoutOrder; GuiElements.playerListLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; GuiElements.playerListLayout.FillDirection=Enum.FillDirection.Vertical; local listPadding=Instance.new("UIPadding",GuiElements.playerListFrame); listPadding.PaddingLeft=UDim.new(0,2); listPadding.PaddingRight=UDim.new(0,2); listPadding.PaddingTop=UDim.new(0,2); listPadding.PaddingBottom=UDim.new(0,2); local footerFrame=Instance.new("Frame",mainFrame); footerFrame.Size=UDim2.new(1,0,0,0); footerFrame.AutomaticSize=Enum.AutomaticSize.Y; footerFrame.BackgroundTransparency=1; footerFrame.LayoutOrder=100; local footerLayout=Instance.new("UIListLayout",footerFrame); footerLayout.Padding=UDim.new(0,0); footerLayout.SortOrder=Enum.SortOrder.LayoutOrder; footerLayout.HorizontalAlignment=Enum.HorizontalAlignment.Center; footerLayout.FillDirection=Enum.FillDirection.Vertical; local disclaimerLabel=Instance.new("TextLabel",footerFrame); disclaimerLabel.Name="DisclaimerLabel"; disclaimerLabel.Size=UDim2.new(1,-THEME.Padding*2,0,THEME.DisclaimerSize+(({Phone=1.5,iPad=2,PC=3})[THEME.Name] or 3)); disclaimerLabel.BackgroundTransparency=1; disclaimerLabel.Font=THEME.FontRegular; disclaimerLabel.Text="Module executed via THE MIST HUB."; disclaimerLabel.TextColor3=THEME.TextDisabled; disclaimerLabel.TextSize=THEME.DisclaimerSize; disclaimerLabel.TextWrapped=false; disclaimerLabel.TextXAlignment=Enum.TextXAlignment.Center; disclaimerLabel.LayoutOrder=1; Instance.new("UIPadding",disclaimerLabel).PaddingTop=UDim.new(0,THEME.Padding/2); GuiElements.footerFrame=footerFrame; task.wait(); local currentAbsoluteWidth=mainFrame.AbsoluteSize.X; if currentAbsoluteWidth<=0 then currentAbsoluteWidth=sizeConstraint.MaxSize.X end; if currentAbsoluteWidth<=0 then currentAbsoluteWidth=THEME.PanelMaxWidth end; local initialHiddenXOffset=-(currentAbsoluteWidth+20); mainFrame.Position=UDim2.new(0,initialHiddenXOffset,0.5,0); GuiElements.autoTargetButton.MouseButton1Click:Connect(function() isAutoTargetEnabled=not isAutoTargetEnabled; local newStateText=isAutoTargetEnabled and "TARGET: ON" or "TARGET: OFF"; local newTextColor=isAutoTargetEnabled and THEME.Success or THEME.Error; local button=GuiElements.autoTargetButton; button.Text=newStateText; button:SetAttribute("CurrentTextColor",newTextColor); TweenService:Create(button,TextColorTweenInfo,{TextColor3=newTextColor}):Play(); updateFOVCircle(); end); GuiElements.espButton.MouseButton1Click:Connect(function() if isStealthMode then return end; toggleESP(not isESPEnabled); end); GuiElements.fovChangerButton.MouseButton1Click:Connect(function() if isStealthMode then return end; isFOVChangerEnabled=not isFOVChangerEnabled; local newStateText=isFOVChangerEnabled and "FOV: ON" or "FOV: OFF"; local newTextColor=isFOVChangerEnabled and THEME.Success or THEME.Error; local button=GuiElements.fovChangerButton; button.Text=newStateText; button:SetAttribute("CurrentTextColor",newTextColor); TweenService:Create(button,TextColorTweenInfo,{TextColor3=newTextColor}):Play(); setSliderEnabled(GuiElements.camFovSliderContainer,isFOVChangerEnabled); if isFOVChangerEnabled then Camera.FieldOfView=currentCameraFOV; setSliderValue(GuiElements.camFovSliderContainer,currentCameraFOV); else Camera.FieldOfView=gameDefaultFOV; setSliderValue(GuiElements.camFovSliderContainer,gameDefaultFOV); end; updateFOVCircle(); end); GuiElements.resetFovButton.MouseButton1Click:Connect(function() if isStealthMode then return end; currentCameraFOV=gameDefaultFOV; Camera.FieldOfView=gameDefaultFOV; setSliderValue(GuiElements.camFovSliderContainer,gameDefaultFOV); updateFOVCircle(); local button=GuiElements.resetFovButton; local originalTextColor=THEME.ButtonText; button:SetAttribute("CurrentTextColor",THEME.Accent); TweenService:Create(button,TextColorTweenInfo,{TextColor3=THEME.Accent}):Play(); task.delay(THEME.TextColorFadeDuration*1.1,function() if button and button.Parent then button:SetAttribute("CurrentTextColor",originalTextColor); TweenService:Create(button,TextColorTweenInfo,{TextColor3=originalTextColor}):Play() end end) end); local lastUpdate=0; local updateInterval=0.5; GuiElements.HeartbeatConnection=RunService.Heartbeat:Connect(function() local currentTime=tick(); if panelVisible and MainGui and MainGui.Parent and mainFrame and mainFrame.Parent and mainFrame.Position.X.Offset>-(mainFrame.AbsoluteSize.X+10) and (currentTime-lastUpdate>=updateInterval) then pcall(updatePlayerListGUI); lastUpdate=currentTime end end); local initialAutoTargetTextColor_=isAutoTargetEnabled and THEME.Success or THEME.Error; GuiElements.autoTargetButton.TextColor3=initialAutoTargetTextColor_; GuiElements.autoTargetButton:SetAttribute("CurrentTextColor",initialAutoTargetTextColor_); local initialEspTextColor_=isESPEnabled and THEME.Success or THEME.Error; GuiElements.espButton.TextColor3=initialEspTextColor_; GuiElements.espButton:SetAttribute("CurrentTextColor",initialEspTextColor_); local initialFovTextColor_=isFOVChangerEnabled and THEME.Success or THEME.Error; GuiElements.fovChangerButton.TextColor3=initialFovTextColor_; GuiElements.fovChangerButton:SetAttribute("CurrentTextColor",initialFovTextColor_); GuiElements.resetFovButton.TextColor3=THEME.ButtonText; GuiElements.resetFovButton:SetAttribute("CurrentTextColor",THEME.ButtonText); setSliderEnabled(GuiElements.camFovSliderContainer,not isStealthMode and isFOVChangerEnabled); setSliderValue(GuiElements.camFovSliderContainer,isFOVChangerEnabled and currentCameraFOV or gameDefaultFOV); setSliderValue(GuiElements.targetFovSliderContainer,targetingFOV); toggleESP(isESPEnabled); updateSizeModeIconDisplay(); return newScreenGui end

--[[ INITIALIZATION AND MAIN LOOP ]]
local success_init, err_init
local standalone_toggle_success, standalone_toggle_err = pcall(function() print("THE MIST: Attempting to create standalone toggle button..."); standaloneToggleArea = Instance.new("TextButton", playerGui); standaloneToggleArea.Name = "MistInvisibleToggleArea_Standalone"; standaloneToggleArea.Size = UDim2.new(0,80,0,80); standaloneToggleArea.AnchorPoint = Vector2.new(0,1); standaloneToggleArea.Position = UDim2.new(0,10,1,-10); standaloneToggleArea.BackgroundTransparency = 1; standaloneToggleArea.Text = ""; standaloneToggleArea.ZIndex = 1000; standaloneToggleArea.MouseButton1Click:Connect(handleInitialPanelToggle); print("THE MIST: Standalone toggle button created and connected.") end)
if not standalone_toggle_success then warn("THE MIST: FAILED to create standalone toggle button:", standalone_toggle_err); local trace = debug.traceback(standalone_toggle_err,2); warn("Stack trace for standalone toggle failure:\n"..trace); return end

success_init, err_init = pcall(function() print("THE MIST: Starting main initialization block..."); fovCircle = createDrawingCircle(); setupToolListener(findTool()); print("THE MIST: fovCircle and tool listener setup."); local tapRaycastParams = RaycastParams.new(); tapRaycastParams.FilterType = Enum.RaycastFilterType.Blacklist; tapRaycastParams.IgnoreWater = true; local function handleTapExclude(input,gameProcessedEvent) if gameProcessedEvent then return end; if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then local unitRay=Camera:ScreenPointToRay(input.Position.X,input.Position.Y); local instancesToBlacklist={character,Storage}; if MainGui and MainGui.Parent then table.insert(instancesToBlacklist,MainGui) end; if sizeModeSelectionScreen and sizeModeSelectionScreen.Parent then table.insert(instancesToBlacklist,sizeModeSelectionScreen) end; tapRaycastParams.FilterDescendantsInstances=instancesToBlacklist; local rayResult=workspace:Raycast(unitRay.Origin,unitRay.Direction*500,tapRaycastParams); if rayResult and rayResult.Instance then local hitPart=rayResult.Instance; local hitCharacter=hitPart:FindFirstAncestorWhichIsA("Model"); if hitCharacter and hitCharacter:FindFirstChildOfClass("Humanoid") then local targetPlayer_=Players:GetPlayerFromCharacter(hitCharacter); if targetPlayer_ and targetPlayer_~=player then excludedPlayers[targetPlayer_]=not excludedPlayers[targetPlayer_]; if MainGui then updateExcludedLabel(targetPlayer_); if isESPEnabled then local h=Storage:FindFirstChild(targetPlayer_.Name); if h and h:IsA("Highlight") then local originalColor=h.FillColor; local feedbackColor=excludedPlayers[targetPlayer_] and THEME.Error or THEME.Success; h.FillColor=feedbackColor; h.FillTransparency=0.3; task.delay(0.3,function() if h and h.Parent then h.FillColor=originalColor; h.FillTransparency=0.5; end end) end end; end end end end end end; UserInputService.InputBegan:Connect(handleTapExclude); print("THE MIST: Tap exclude connected."); local function setupPlayerListeners(p_listener) if p_listener==player then return end; task.spawn(function() task.wait(0.1); if not p_listener or not p_listener.Parent then return end; if MainGui and excludedPlayers[p_listener] then updateExcludedLabel(p_listener) end; if MainGui and isESPEnabled then applyHighlight(p_listener) end; p_listener.CharacterAdded:Connect(function(newChar_listener) task.wait(0.1); if not p_listener or not p_listener.Parent then return end; if MainGui and excludedPlayers[p_listener] then updateExcludedLabel(p_listener) end; if MainGui and isESPEnabled then applyHighlight(p_listener) end end); p_listener.CharacterRemoving:Connect(function(oldChar_listener) local head_listener=oldChar_listener and oldChar_listener:FindFirstChild("Head"); local existingLabel_listener=head_listener and head_listener:FindFirstChild("ExcludeLabel"); if existingLabel_listener then existingLabel_listener:Destroy() end; local h_listener=Storage:FindFirstChild(p_listener.Name); if h_listener then h_listener.Adornee=nil end end) end) end; Players.PlayerAdded:Connect(function(newPlayer) if newPlayer~=player then setupPlayerListeners(newPlayer) end end); Players.PlayerRemoving:Connect(function(leavingPlayer) excludedPlayers[leavingPlayer]=nil; if MainGui then removeHighlight(leavingPlayer) end; end); for _,existingPlayer in pairs(Players:GetPlayers()) do setupPlayerListeners(existingPlayer) end; print("THE MIST: Player listeners setup."); player.CharacterAdded:Connect(function(newCharacter) character=newCharacter; task.wait(0.2); backpack=player:FindFirstChild("Backpack") or player:WaitForChild("Backpack",5); setupToolListener(findTool()); if MainGui then for targetPlayer__,isExcluded_ in pairs(excludedPlayers) do if isExcluded_ then updateExcludedLabel(targetPlayer__) end end end; newCharacter.ChildAdded:Connect(function(child) if child:IsA("Tool") then setupToolListener(child) end end); newCharacter.ChildRemoved:Connect(function(child) if child==currentTool then setupToolListener(nil) end end) end); if character then character.ChildAdded:Connect(function(child) if child:IsA("Tool") then setupToolListener(child) end end); character.ChildRemoved:Connect(function(child) if child==currentTool then setupToolListener(nil) end end) end; player.ChildAdded:Connect(function(child) if child.Name=="Backpack" and child:IsA("Backpack") then backpack=child end end); print("THE MIST: Character and backpack listeners setup."); RunService.RenderStepped:Connect(function() if not character or not character.Parent then character=player.Character; if not character then return end end; local currentlyEquippedTool=nil; if character then currentlyEquippedTool=character:FindFirstChildOfClass("Tool") end; if currentlyEquippedTool~=currentTool then setupToolListener(currentlyEquippedTool) end; if currentTool and not currentTool.Enabled and currentEffectiveCooldown>0 then if tick()-lastShotTime>=currentEffectiveCooldown then pcall(function() currentTool.Enabled=true end); currentEffectiveCooldown=0 end end; if MainGui and MainGui.Parent and mainFrame and mainFrame.Parent then pcall(updateFOVCircle) end; pcall(shoot) end); print("THE MIST: RenderStepped loop connected."); print("THE MIST: Main initialization complete.") end)
if not success_init then local err_message="Unknown error during main initialization"; if err_init~=nil then err_message=tostring(err_init) end; warn("THE MIST: Main initialization FAILED:",err_message); local trace=debug.traceback(err_init,2); warn("Stack trace for main init failure:\n"..trace); if MainGui and MainGui.Parent then MainGui:Destroy() end; MainGui=nil; if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy() end; TooltipLabel=nil; if Storage and Storage.Parent then Storage:Destroy() end; if fovCircle and fovCircle.Destroy then fovCircle:Destroy(); fovCircle=nil end; if activatedConnection then activatedConnection:Disconnect() end; if sizeModeSelectionScreen and sizeModeSelectionScreen.Parent then sizeModeSelectionScreen:Destroy() end; GuiElements = {}; GuiElements_Modal = {} else print("THE MIST: Script fully initialized successfully.") end
if script and script:IsA("Script") then script.Destroying:Connect(function() print("THE MIST: Script destroying, cleaning up..."); if currentTool and currentTool.Parent and not currentTool.Enabled then pcall(function() currentTool.Enabled=true end) end; if activatedConnection then activatedConnection:Disconnect(); activatedConnection=nil end; if MainGui and MainGui.Parent then MainGui:Destroy(); MainGui=nil end; if TooltipLabel and TooltipLabel.Parent then TooltipLabel:Destroy(); TooltipLabel=nil end; if Storage and Storage.Parent then Storage:Destroy() end; if fovCircle and fovCircle.Destroy then fovCircle:Destroy(); fovCircle=nil end; if GuiElements.HeartbeatConnection then GuiElements.HeartbeatConnection:Disconnect(); GuiElements.HeartbeatConnection=nil end; if standaloneToggleArea and standaloneToggleArea.Parent then standaloneToggleArea:Destroy(); standaloneToggleArea=nil end; if sizeModeSelectionScreen and sizeModeSelectionScreen.Parent then sizeModeSelectionScreen:Destroy(); sizeModeSelectionScreen=nil end; GuiElements={}; GuiElements_Modal={}; print("THE MIST: Cleanup complete.") end) end
print("THE MIST: Script execution reached end of file.")

--- END OF MODIFIED SCRIPT v27 (26.1) ---